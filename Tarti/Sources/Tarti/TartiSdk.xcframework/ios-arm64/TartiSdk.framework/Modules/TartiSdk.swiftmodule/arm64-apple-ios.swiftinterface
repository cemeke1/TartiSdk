// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TartiSdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreBluetooth
import Darwin
import Foundation
import ObjectiveC
import Swift
import SystemConfiguration
@_exported import TartiSdk
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension TartiSdk.PKCS5 {
  public struct PBKDF2 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: TartiSdk.PKCS5.PBKDF2.Error, b: TartiSdk.PKCS5.PBKDF2.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil, variant: TartiSdk.HMAC.Variant = .sha2(.sha256)) throws
    public func calculate() throws -> Swift.Array<Swift.UInt8>
    public func callAsFunction() throws -> Swift.Array<Swift.UInt8>
  }
}
@_hasMissingDesignatedInitializers public class Common {
  @objc deinit
}
public struct OFB : TartiSdk.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: TartiSdk.OFB.Error, b: TartiSdk.OFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: TartiSdk.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
}
public enum SignatureError : Swift.Error {
  case sign
  case verify
  public static func == (a: TartiSdk.SignatureError, b: TartiSdk.SignatureError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Signature : AnyObject {
  var keySize: Swift.Int { get }
  func sign(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func sign(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func verify(signature: Swift.ArraySlice<Swift.UInt8>, for expectedData: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Bool
  func verify(signature: Swift.Array<Swift.UInt8>, for expectedData: Swift.Array<Swift.UInt8>) throws -> Swift.Bool
}
extension TartiSdk.Signature {
  public func sign(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func verify(signature: Swift.Array<Swift.UInt8>, for expectedData: Swift.Array<Swift.UInt8>) throws -> Swift.Bool
}
final public class SHA1 {
  @usableFromInline
  internal static let digestLength: Swift.Int
  @usableFromInline
  internal static let blockSize: Swift.Int
  @usableFromInline
  internal static let hashInitialValue: Swift.ContiguousArray<Swift.UInt32>
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var processedBytesTotalCount: Swift.Int
  @usableFromInline
  final internal var accumulatedHash: Swift.ContiguousArray<Swift.UInt32>
  public init()
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func process(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.ContiguousArray<Swift.UInt32>)
  @objc deinit
}
extension TartiSdk.SHA1 : TartiSdk.Updatable {
  @discardableResult
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      let lengthInBits = (processedBytesTotalCount + self.accumulated.count) * 8
      let lengthBytes = lengthInBits.bytes(totalBytes: 64 / 8)  

       
      bitPadding(to: &self.accumulated, blockSize: SHA1.blockSize, allowance: 64 / 8)

       
      self.accumulated += lengthBytes
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: SHA1.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= SHA1.blockSize {
        self.process(block: chunk, currentHash: &self.accumulatedHash)
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)
    self.processedBytesTotalCount += processedBytes

     
    var result = Array<UInt8>(repeating: 0, count: SHA1.digestLength)
    var pos = 0
    for idx in 0..<self.accumulatedHash.count {
      let h = self.accumulatedHash[idx]
      result[pos + 0] = UInt8((h >> 24) & 0xff)
      result[pos + 1] = UInt8((h >> 16) & 0xff)
      result[pos + 2] = UInt8((h >> 8) & 0xff)
      result[pos + 3] = UInt8(h & 0xff)
      pos += 4
    }

     
    if isLast {
      self.accumulatedHash = SHA1.hashInitialValue
    }

    return result
  }
}
final public class XChaCha20 : TartiSdk.BlockMode {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    case notSupported
    public static func == (a: TartiSdk.XChaCha20.Error, b: TartiSdk.XChaCha20.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, iv nonce: Swift.Array<Swift.UInt8>, blockCounter: Swift.UInt32 = 0) throws
  final public let options: TartiSdk.BlockModeOption
  final public let customBlockSize: Swift.Int?
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
  @objc deinit
}
extension TartiSdk.XChaCha20 : TartiSdk.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension TartiSdk.XChaCha20 : TartiSdk.Cryptors {
  final public func makeEncryptor() throws -> any TartiSdk.Cryptor & TartiSdk.Updatable
  final public func makeDecryptor() throws -> any TartiSdk.Cryptor & TartiSdk.Updatable
}
extension TartiSdk.PKCS5 {
  public struct PBKDF1 {
    public enum Error : Swift.Error {
      case invalidInput
      case derivedKeyTooLong
      public static func == (a: TartiSdk.PKCS5.PBKDF1.Error, b: TartiSdk.PKCS5.PBKDF1.Error) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum Variant {
      case md5, sha1
      @usableFromInline
      internal var size: Swift.Int {
        get
      }
      @usableFromInline
      internal func calculateHash(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
      public static func == (a: TartiSdk.PKCS5.PBKDF1.Variant, b: TartiSdk.PKCS5.PBKDF1.Variant) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @usableFromInline
    internal let iterations: Swift.Int
    @usableFromInline
    internal let variant: TartiSdk.PKCS5.PBKDF1.Variant
    @usableFromInline
    internal let keyLength: Swift.Int
    @usableFromInline
    internal let t1: Swift.Array<Swift.UInt8>
    public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, variant: TartiSdk.PKCS5.PBKDF1.Variant = .sha1, iterations: Swift.Int = 4096, keyLength: Swift.Int? = nil) throws
    @inlinable public func calculate() -> Swift.Array<Swift.UInt8> {
      var t = self.t1
      for _ in 2...self.iterations {
        t = self.variant.calculateHash(t)
      }
      return Array(t[0..<self.keyLength])
    }
    public func callAsFunction() -> Swift.Array<Swift.UInt8>
  }
}
@_hasMissingDesignatedInitializers public class Constants {
  public static let TAG: Swift.String
  public static let PREF_DEVICE_CODE: Swift.String
  public static let PREF_DEVICE_MAC: Swift.String
  public static let PREF_TARE: Swift.String
  public static let PREF_LANG: Swift.String
  public static let _SERVICE: CoreBluetooth.CBUUID
  public static let _BATTERY: CoreBluetooth.CBUUID
  public static let _TODAY: CoreBluetooth.CBUUID
  public static let _SERVICE_AUTH: CoreBluetooth.CBUUID
  public static let _NOTIFY_AUTH: CoreBluetooth.CBUUID
  public static let _SERVICE_HR: CoreBluetooth.CBUUID
  public static let _CONTROL_HR: CoreBluetooth.CBUUID
  public static let _NOTIFY_HR: CoreBluetooth.CBUUID
  public static let PAIR: [Swift.UInt8]
  public static let MIBAND2_AUTH_1: [Swift.UInt8]
  public static let MIBAND2_AUTH_2: [Swift.UInt8]
  public static let MIBAND2_AUTH_3: [Swift.UInt8]
  public static let SINGLE_HEART_RATE: [Swift.UInt8]
  public static let CONTINUOUS_HEART_RATE_START: [Swift.UInt8]
  public static let CONTINUOUS_HEART_RATE_CONTINUE: [Swift.UInt8]
  public static let SERVICE: CoreBluetooth.CBUUID
  public static let RX: CoreBluetooth.CBUUID
  public static let TX: CoreBluetooth.CBUUID
  public static let DESCRIPTOR: CoreBluetooth.CBUUID
  public static let UART_SERVICE: CoreBluetooth.CBUUID
  public static let UART_RX: CoreBluetooth.CBUUID
  public static let UART_TX: CoreBluetooth.CBUUID
  public static let devices: [Swift.String : TartiSdk.Model]
  @objc deinit
}
extension Swift.UInt32 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt32(bytes[index.advanced(by: 0)]) << 24 : 0
    let val1 = count > 1 ? UInt32(bytes[index.advanced(by: 1)]) << 16 : 0
    let val2 = count > 2 ? UInt32(bytes[index.advanced(by: 2)]) << 8 : 0
    let val3 = count > 3 ? UInt32(bytes[index.advanced(by: 3)]) : 0

    self = val0 | val1 | val2 | val3
  }
}
extension TartiSdk.CS.BigUInt {
  public func power(_ exponent: Swift.Int) -> TartiSdk.CS.BigUInt
  public func power(_ exponent: TartiSdk.CS.BigUInt, modulus: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
}
extension TartiSdk.CS.BigInt {
  public func power(_ exponent: Swift.Int) -> TartiSdk.CS.BigInt
  public func power(_ exponent: TartiSdk.CS.BigInt, modulus: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
}
@_hasMissingDesignatedInitializers public class Bond : TartiSdk.BaseHandler {
  public var deviceCode: Swift.String!
  override public func scheduleTask(_ task: TartiSdk.BaseTask)
  public func startPairing(_ device: CoreBluetooth.CBPeripheral)
  override public func processData(_ data: [TartiSdk.byte])
  public func run(_ deviceCode: Swift.String)
  @objc deinit
}
public struct BlockModeOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  @usableFromInline
  internal static let none: TartiSdk.BlockModeOption
  @usableFromInline
  internal static let initializationVectorRequired: TartiSdk.BlockModeOption
  @usableFromInline
  internal static let paddingRequired: TartiSdk.BlockModeOption
  @usableFromInline
  internal static let useEncryptToDecrypt: TartiSdk.BlockModeOption
  public typealias ArrayLiteralElement = TartiSdk.BlockModeOption
  public typealias Element = TartiSdk.BlockModeOption
  public typealias RawValue = Swift.Int
}
public enum NDuration {
  case long
  case short
  public static func == (a: TartiSdk.NDuration, b: TartiSdk.NDuration) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TartiSdk.CS.BigUInt : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TartiSdk.CS.BigInt : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class CMAC : TartiSdk.Authenticator {
  public enum Error : Swift.Error {
    case wrongKeyLength
    public static func == (a: TartiSdk.CMAC.Error, b: TartiSdk.CMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(key: Swift.Array<Swift.UInt8>) throws
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func authenticate(_ bytes: Swift.Array<Swift.UInt8>, cipher: any TartiSdk.Cipher) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
public enum Bit : Swift.Int {
  case zero
  case one
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension TartiSdk.Bit {
  @inlinable internal func inverted() -> TartiSdk.Bit {
    self == .zero ? .one : .zero
  }
}
extension TartiSdk.CS.BigUInt {
  public static func randomInteger<RNG>(withMaximumWidth width: Swift.Int, using generator: inout RNG) -> TartiSdk.CS.BigUInt where RNG : Swift.RandomNumberGenerator
  public static func randomInteger(withMaximumWidth width: Swift.Int) -> TartiSdk.CS.BigUInt
  public static func randomInteger<RNG>(withExactWidth width: Swift.Int, using generator: inout RNG) -> TartiSdk.CS.BigUInt where RNG : Swift.RandomNumberGenerator
  public static func randomInteger(withExactWidth width: Swift.Int) -> TartiSdk.CS.BigUInt
  public static func randomInteger<RNG>(lessThan limit: TartiSdk.CS.BigUInt, using generator: inout RNG) -> TartiSdk.CS.BigUInt where RNG : Swift.RandomNumberGenerator
  public static func randomInteger(lessThan limit: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
}
extension Swift.Array where Element == Swift.UInt8 {
  public func toBase64(options: Foundation.Data.Base64EncodingOptions = []) -> Swift.String
  public init(base64: Swift.String, options: Foundation.Data.Base64DecodingOptions = .ignoreUnknownCharacters)
}
public enum PKCS7 {
}
extension TartiSdk.CS.BigUInt {
  public func isStrongProbablePrime(_ base: TartiSdk.CS.BigUInt) -> Swift.Bool
  public func isPrime(rounds: Swift.Int = 10) -> Swift.Bool
}
extension TartiSdk.CS.BigInt {
  public func isStrongProbablePrime(_ base: TartiSdk.CS.BigInt) -> Swift.Bool
  public func isPrime(rounds: Swift.Int = 10) -> Swift.Bool
}
@inlinable internal func rotateLeft(_ value: Swift.UInt8, by: Swift.UInt8) -> Swift.UInt8 {
  ((value << by) & 0xff) | (value >> (8 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  ((value << by) & 0xffff) | (value >> (16 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  ((value << by) & 0xffffffff) | (value >> (32 - by))
}
@inlinable internal func rotateLeft(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  (value << by) | (value >> (64 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt16, by: Swift.UInt16) -> Swift.UInt16 {
  (value >> by) | (value << (16 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt32, by: Swift.UInt32) -> Swift.UInt32 {
  (value >> by) | (value << (32 - by))
}
@inlinable internal func rotateRight(_ value: Swift.UInt64, by: Swift.UInt64) -> Swift.UInt64 {
  ((value >> by) | (value << (64 - by)))
}
@inlinable internal func reversed(_ uint8: Swift.UInt8) -> Swift.UInt8 {
  var v = uint8
  v = (v & 0xf0) >> 4 | (v & 0x0f) << 4
  v = (v & 0xcc) >> 2 | (v & 0x33) << 2
  v = (v & 0xaa) >> 1 | (v & 0x55) << 1
  return v
}
@inlinable internal func reversed(_ uint32: Swift.UInt32) -> Swift.UInt32 {
  var v = uint32
  v = ((v >> 1) & 0x55555555) | ((v & 0x55555555) << 1)
  v = ((v >> 2) & 0x33333333) | ((v & 0x33333333) << 2)
  v = ((v >> 4) & 0x0f0f0f0f) | ((v & 0x0f0f0f0f) << 4)
  v = ((v >> 8) & 0x00ff00ff) | ((v & 0x00ff00ff) << 8)
  v = ((v >> 16) & 0xffff) | ((v & 0xffff) << 16)
  return v
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.ArraySlice<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  return xor(left, right).slice
}
@inlinable internal func xor<T, V>(_ left: T, _ right: V) -> Swift.Array<Swift.UInt8> where T : Swift.RandomAccessCollection, V : Swift.RandomAccessCollection, T.Element == Swift.UInt8, T.Index == Swift.Int, V.Element == Swift.UInt8, V.Index == Swift.Int {
  let length = Swift.min(left.count, right.count)

  let buf = UnsafeMutablePointer<UInt8>.allocate(capacity: length)
  buf.initialize(repeating: 0, count: length)
  defer {
    buf.deinitialize(count: length)
    buf.deallocate()
  }

   
  for i in 0..<length {
    buf[i] = left[left.startIndex.advanced(by: i)] ^ right[right.startIndex.advanced(by: i)]
  }

  return Array(UnsafeBufferPointer(start: buf, count: length))
}
@inline(__always) @inlinable internal func bitPadding(to data: inout Swift.Array<Swift.UInt8>, blockSize: Swift.Int, allowance: Swift.Int = 0) {
  let msgLength = data.count
   
   
  data.append(0x80)

   
  let max = blockSize - allowance  
  if msgLength % blockSize < max {  
    data += Array<UInt8>(repeating: 0, count: max - 1 - (msgLength % blockSize))
  } else {
    data += Array<UInt8>(repeating: 0, count: blockSize + max - 1 - (msgLength % blockSize))
  }
}
@available(*, renamed: "Digest")
public typealias Hash = TartiSdk.Digest
public struct Digest {
  public static func md5(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha1(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha224(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha256(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha384(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha512(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  public static func sha2(_ bytes: Swift.Array<Swift.UInt8>, variant: TartiSdk.SHA2.Variant) -> Swift.Array<Swift.UInt8>
  public static func sha3(_ bytes: Swift.Array<Swift.UInt8>, variant: TartiSdk.SHA3.Variant) -> Swift.Array<Swift.UInt8>
}
final public class Scrypt {
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>, dkLen: Swift.Int, N: Swift.Int, r: Swift.Int, p: Swift.Int) throws
  final public func calculate() throws -> [Swift.UInt8]
  final public func callAsFunction() throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension TartiSdk.AES {
  convenience public init(key: Swift.String, iv: Swift.String, padding: TartiSdk.Padding = .pkcs7) throws
}
final public class AES {
  public enum Error : Swift.Error {
    case invalidKeySize
    case dataPaddingRequired
    case invalidData
    public static func == (a: TartiSdk.AES.Error, b: TartiSdk.AES.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant : Swift.Int {
    case aes128, aes192, aes256
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @usableFromInline
  final internal let variantNr: Swift.Int
  @usableFromInline
  final internal let variantNb: Swift.Int
  @usableFromInline
  final internal let variantNk: Swift.Int
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  final public let variant: TartiSdk.AES.Variant
  @usableFromInline
  final internal let blockMode: any TartiSdk.BlockMode
  @usableFromInline
  final internal let padding: TartiSdk.Padding
  @usableFromInline
  final internal var expandedKey: Swift.Array<Swift.Array<Swift.UInt32>> {
    get
    set
  }
  @usableFromInline
  final internal var expandedKeyInv: Swift.Array<Swift.Array<Swift.UInt32>> {
    get
    set
  }
  @usableFromInline
  internal static let T0: [Swift.UInt32]
  @usableFromInline
  internal static let T0_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T1: [Swift.UInt32]
  @usableFromInline
  internal static let T1_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T2: [Swift.UInt32]
  @usableFromInline
  internal static let T2_INV: [Swift.UInt32]
  @usableFromInline
  internal static let T3: [Swift.UInt32]
  @usableFromInline
  internal static let T3_INV: [Swift.UInt32]
  @usableFromInline
  internal static let U1: [Swift.UInt32]
  @usableFromInline
  internal static let U2: [Swift.UInt32]
  @usableFromInline
  internal static let U3: [Swift.UInt32]
  @usableFromInline
  internal static let U4: [Swift.UInt32]
  public init(key: Swift.Array<Swift.UInt8>, blockMode: any TartiSdk.BlockMode, padding: TartiSdk.Padding = .pkcs7) throws
  @inlinable final internal func encrypt(block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>? {
    if self.blockMode.options.contains(.paddingRequired) && block.count != AES.blockSize {
      return Array(block)
    }

    let rounds = self.variantNr
    let rk = self.expandedKey

    let b00 = UInt32(block[block.startIndex.advanced(by: 0)])
    let b01 = UInt32(block[block.startIndex.advanced(by: 1)]) << 8
    let b02 = UInt32(block[block.startIndex.advanced(by: 2)]) << 16
    let b03 = UInt32(block[block.startIndex.advanced(by: 3)]) << 24
    var b0 = b00 | b01 | b02 | b03

    let b10 = UInt32(block[block.startIndex.advanced(by: 4)])
    let b11 = UInt32(block[block.startIndex.advanced(by: 5)]) << 8
    let b12 = UInt32(block[block.startIndex.advanced(by: 6)]) << 16
    let b13 = UInt32(block[block.startIndex.advanced(by: 7)]) << 24
    var b1 = b10 | b11 | b12 | b13

    let b20 = UInt32(block[block.startIndex.advanced(by: 8)])
    let b21 = UInt32(block[block.startIndex.advanced(by: 9)]) << 8
    let b22 = UInt32(block[block.startIndex.advanced(by: 10)]) << 16
    let b23 = UInt32(block[block.startIndex.advanced(by: 11)]) << 24
    var b2 = b20 | b21 | b22 | b23

    let b30 = UInt32(block[block.startIndex.advanced(by: 12)])
    let b31 = UInt32(block[block.startIndex.advanced(by: 13)]) << 8
    let b32 = UInt32(block[block.startIndex.advanced(by: 14)]) << 16
    let b33 = UInt32(block[block.startIndex.advanced(by: 15)]) << 24
    var b3 = b30 | b31 | b32 | b33

    let tLength = 4
    let t = UnsafeMutablePointer<UInt32>.allocate(capacity: tLength)
    t.initialize(repeating: 0, count: tLength)
    defer {
      t.deinitialize(count: tLength)
      t.deallocate()
    }

    for r in 0..<rounds - 1 {
      t[0] = b0 ^ rk[r][0]
      t[1] = b1 ^ rk[r][1]
      t[2] = b2 ^ rk[r][2]
      t[3] = b3 ^ rk[r][3]

      let lb00 = AES.T0[Int(t[0] & 0xff)]
      let lb01 = AES.T1[Int((t[1] >> 8) & 0xff)]
      let lb02 = AES.T2[Int((t[2] >> 16) & 0xff)]
      let lb03 = AES.T3[Int(t[3] >> 24)]
      b0 = lb00 ^ lb01 ^ lb02 ^ lb03

      let lb10 = AES.T0[Int(t[1] & 0xff)]
      let lb11 = AES.T1[Int((t[2] >> 8) & 0xff)]
      let lb12 = AES.T2[Int((t[3] >> 16) & 0xff)]
      let lb13 = AES.T3[Int(t[0] >> 24)]
      b1 = lb10 ^ lb11 ^ lb12 ^ lb13

      let lb20 = AES.T0[Int(t[2] & 0xff)]
      let lb21 = AES.T1[Int((t[3] >> 8) & 0xff)]
      let lb22 = AES.T2[Int((t[0] >> 16) & 0xff)]
      let lb23 = AES.T3[Int(t[1] >> 24)]
      b2 = lb20 ^ lb21 ^ lb22 ^ lb23

      let lb30 = AES.T0[Int(t[3] & 0xff)]
      let lb31 = AES.T1[Int((t[0] >> 8) & 0xff)]
      let lb32 = AES.T2[Int((t[1] >> 16) & 0xff)]
      let lb33 = AES.T3[Int(t[2] >> 24)]
      b3 = lb30 ^ lb31 ^ lb32 ^ lb33
    }

     
    let r = rounds - 1

    t[0] = b0 ^ rk[r][0]
    t[1] = b1 ^ rk[r][1]
    t[2] = b2 ^ rk[r][2]
    t[3] = b3 ^ rk[r][3]

     
    b0 = F1(t[0], t[1], t[2], t[3]) ^ rk[rounds][0]
    b1 = F1(t[1], t[2], t[3], t[0]) ^ rk[rounds][1]
    b2 = F1(t[2], t[3], t[0], t[1]) ^ rk[rounds][2]
    b3 = F1(t[3], t[0], t[1], t[2]) ^ rk[rounds][3]

    let encrypted: Array<UInt8> = [
      UInt8(b0 & 0xff), UInt8((b0 >> 8) & 0xff), UInt8((b0 >> 16) & 0xff), UInt8((b0 >> 24) & 0xff),
      UInt8(b1 & 0xff), UInt8((b1 >> 8) & 0xff), UInt8((b1 >> 16) & 0xff), UInt8((b1 >> 24) & 0xff),
      UInt8(b2 & 0xff), UInt8((b2 >> 8) & 0xff), UInt8((b2 >> 16) & 0xff), UInt8((b2 >> 24) & 0xff),
      UInt8(b3 & 0xff), UInt8((b3 >> 8) & 0xff), UInt8((b3 >> 16) & 0xff), UInt8((b3 >> 24) & 0xff)
    ]
    return encrypted
  }
  @usableFromInline
  final internal func decrypt(block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
  @objc deinit
}
extension TartiSdk.AES {
  @usableFromInline
  @inline(__always) final internal func F1(_ x0: Swift.UInt32, _ x1: Swift.UInt32, _ x2: Swift.UInt32, _ x3: Swift.UInt32) -> Swift.UInt32
}
extension TartiSdk.AES : TartiSdk.Cipher {
  @inlinable final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    let blockSize = self.blockMode.customBlockSize ?? AES.blockSize
    let chunks = bytes.batched(by: blockSize)

    var oneTimeCryptor = try makeEncryptor()
    var out = Array<UInt8>(reserveCapacity: bytes.count)
    for chunk in chunks {
      out += try oneTimeCryptor.update(withBytes: chunk, isLast: false)
    }
     
    out += try oneTimeCryptor.finish()

    if self.blockMode.options.contains(.paddingRequired) && (out.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    return out
  }
  @inlinable final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    if self.blockMode.options.contains(.paddingRequired) && (bytes.count % AES.blockSize != 0) {
      throw Error.dataPaddingRequired
    }

    var oneTimeCryptor = try makeDecryptor()
    let chunks = bytes.batched(by: AES.blockSize)
    if chunks.isEmpty {
      throw Error.invalidData
    }

    var out = Array<UInt8>(reserveCapacity: bytes.count)

    var lastIdx = chunks.startIndex
    chunks.indices.formIndex(&lastIdx, offsetBy: chunks.count - 1)

     
     
    for idx in chunks.indices {
      out += try oneTimeCryptor.update(withBytes: chunks[idx], isLast: idx == lastIdx)
    }
    return out
  }
}
public enum NConnectionStatusType {
  case CONNECTED
  case DISCONNECTED
  public static func == (a: TartiSdk.NConnectionStatusType, b: TartiSdk.NConnectionStatusType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ByteArrayInputStream {
  public func read() -> TartiSdk.int
  public func read(_ b: inout [TartiSdk.byte]) -> TartiSdk.int
  public func read(_ b: inout [TartiSdk.byte], _ off: TartiSdk.int, _ len: TartiSdk.int) -> TartiSdk.int
  public func available() -> TartiSdk.int
  public func readInt16() -> TartiSdk.int
  public func readInt24() -> TartiSdk.int
  public func readInt32() -> TartiSdk.int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataWriterTask : TartiSdk.BaseTask {
  override public func run()
  @objc deinit
}
final public class Poly1305 : TartiSdk.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    public static func == (a: TartiSdk.Poly1305.Error, b: TartiSdk.Poly1305.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Tag {
  public var tag: TartiSdk.int
  public var data: [TartiSdk.byte]
  public static func parse(_ inputStream: TartiSdk.ByteArrayInputStream) -> TartiSdk.Tag
  public static func isValidTag(_ tag: TartiSdk.int) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Helpers {
  public static func readInt16(_ inputStream: TartiSdk.ByteArrayInputStream) -> TartiSdk.int
  public static func readInt24(_ inputStream: TartiSdk.ByteArrayInputStream) -> TartiSdk.int
  public static func readInt32(_ inputStream: TartiSdk.ByteArrayInputStream) -> TartiSdk.int
  public static func writeInt16(_ i: TartiSdk.int, _ outputStream: TartiSdk.ByteArrayOutputStream) -> TartiSdk.int
  public static func writeInt24(_ i: TartiSdk.int, _ outputStream: TartiSdk.ByteArrayOutputStream) -> TartiSdk.int
  public static func writeInt32(_ i: TartiSdk.int, _ outputStream: TartiSdk.ByteArrayOutputStream) -> TartiSdk.int
  public static func writeBytes(Of data: TartiSdk.int, _ size: TartiSdk.int, _ buffer: TartiSdk.ByteArrayOutputStream)
  public static func timeToInt(_ date: Foundation.Date) -> TartiSdk.int
  public static func dateToInt_y19(_ date: Foundation.Date) -> TartiSdk.int
  public static func dateToInt_y2k(_ date: Foundation.Date) -> TartiSdk.int
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: TartiSdk.ToastPosition = ToastManager.shared.position, title: Swift.String? = nil, image: UIKit.UIImage? = nil, style: TartiSdk.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func makeToast(_ message: Swift.String?, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, title: Swift.String?, image: UIKit.UIImage?, style: TartiSdk.ToastStyle = ToastManager.shared.style, completion: ((_ didTap: Swift.Bool) -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, position: TartiSdk.ToastPosition = ToastManager.shared.position, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func showToast(_ toast: UIKit.UIView, duration: Foundation.TimeInterval = ToastManager.shared.duration, point: CoreFoundation.CGPoint, completion: ((_ didTap: Swift.Bool) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func hideToast()
  @_Concurrency.MainActor @preconcurrency public func hideToast(_ toast: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func hideAllToasts(includeActivity: Swift.Bool = false, clearQueue: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency public func clearToastQueue()
  @_Concurrency.MainActor @preconcurrency public func makeToastActivity(_ position: TartiSdk.ToastPosition)
  @_Concurrency.MainActor @preconcurrency public func makeToastActivity(_ point: CoreFoundation.CGPoint)
  @_Concurrency.MainActor @preconcurrency public func hideToastActivity()
  @_Concurrency.MainActor @preconcurrency public func toastViewForMessage(_ message: Swift.String?, title: Swift.String?, image: UIKit.UIImage?, style: TartiSdk.ToastStyle) throws -> UIKit.UIView
}
public struct ToastStyle {
  public init()
  public var backgroundColor: UIKit.UIColor
  public var titleColor: UIKit.UIColor
  public var messageColor: UIKit.UIColor
  public var maxWidthPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var maxHeightPercentage: CoreFoundation.CGFloat {
    get
    set
  }
  public var horizontalPadding: CoreFoundation.CGFloat
  public var verticalPadding: CoreFoundation.CGFloat
  public var cornerRadius: CoreFoundation.CGFloat
  public var titleFont: UIKit.UIFont
  public var messageFont: UIKit.UIFont
  public var titleAlignment: UIKit.NSTextAlignment
  public var messageAlignment: UIKit.NSTextAlignment
  public var titleNumberOfLines: Swift.Int
  public var messageNumberOfLines: Swift.Int
  public var displayShadow: Swift.Bool
  public var shadowColor: UIKit.UIColor
  public var shadowOpacity: Swift.Float {
    get
    set
  }
  public var shadowRadius: CoreFoundation.CGFloat
  public var shadowOffset: CoreFoundation.CGSize
  public var imageSize: CoreFoundation.CGSize
  public var activitySize: CoreFoundation.CGSize
  public var fadeDuration: Swift.Double
  public var activityIndicatorColor: UIKit.UIColor
  public var activityBackgroundColor: UIKit.UIColor
}
@_hasMissingDesignatedInitializers public class ToastManager {
  public static let shared: TartiSdk.ToastManager
  public var style: TartiSdk.ToastStyle
  public var isTapToDismissEnabled: Swift.Bool
  public var isQueueEnabled: Swift.Bool
  public var duration: Swift.Double
  public var position: TartiSdk.ToastPosition
  @objc deinit
}
public enum ToastPosition {
  case top
  case center
  case bottom
  public static func == (a: TartiSdk.ToastPosition, b: TartiSdk.ToastPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Cryptors : AnyObject {
  func makeEncryptor() throws -> any TartiSdk.Cryptor & TartiSdk.Updatable
  func makeDecryptor() throws -> any TartiSdk.Cryptor & TartiSdk.Updatable
  static func randomIV(_ blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
}
extension TartiSdk.Cryptors {
  public static func randomIV(_ count: Swift.Int) -> Swift.Array<Swift.UInt8>
}
public protocol CipherModeWorker {
  var cipherOperation: TartiSdk.CipherOperationOnBlock { get }
  var additionalBufferSize: Swift.Int { get }
  @inlinable mutating func encrypt(block plaintext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @inlinable mutating func decrypt(block ciphertext: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
}
public protocol BlockModeWorker : TartiSdk.CipherModeWorker {
  var blockSize: Swift.Int { get }
}
public protocol CounterModeWorker : TartiSdk.CipherModeWorker {
  associatedtype Counter
  var counter: Self.Counter { get set }
}
public protocol SeekableModeWorker : TartiSdk.CipherModeWorker {
  mutating func seek(to position: Swift.Int) throws
}
public protocol StreamModeWorker : TartiSdk.CipherModeWorker {
}
public protocol FinalizingEncryptModeWorker : TartiSdk.CipherModeWorker {
  mutating func finalize(encrypt ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
public protocol FinalizingDecryptModeWorker : TartiSdk.CipherModeWorker {
  @discardableResult
  mutating func willDecryptLast(bytes ciphertext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func didDecryptLast(bytes plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
  mutating func finalize(decrypt plaintext: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.ArraySlice<Swift.UInt8>
}
final public class Blowfish {
  public enum Error : Swift.Error {
    case dataPaddingRequired
    case invalidKeyOrInitializationVector
    case invalidInitializationVector
    case invalidBlockMode
    public static func == (a: TartiSdk.Blowfish.Error, b: TartiSdk.Blowfish.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  public init(key: Swift.Array<Swift.UInt8>, blockMode: any TartiSdk.BlockMode = CBC(iv: Array<UInt8>(repeating: 0, count: Blowfish.blockSize)), padding: TartiSdk.Padding) throws
  @objc deinit
}
extension TartiSdk.Blowfish : TartiSdk.Cipher {
  final public func encrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
  final public func decrypt<C>(_ bytes: C) throws -> Swift.Array<Swift.UInt8> where C : Swift.Collection, C.Element == Swift.UInt8, C.Index == Swift.Int
}
public enum NCallbackType {
  case boyOlcer
  case baskul
  case tnt
  case miband2_battery
  case miband2_today
  case miband2_real_time_steps
  case miband2_single_hr
  case miband2_single_chr
  case miband2_chr
  public static func == (a: TartiSdk.NCallbackType, b: TartiSdk.NCallbackType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@usableFromInline
final internal class StreamEncryptor : TartiSdk.Cryptor, TartiSdk.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal var worker: any TartiSdk.CipherModeWorker
  @usableFromInline
  final internal let padding: TartiSdk.Padding
  @usableFromInline
  final internal var lastBlockRemainder: Swift.Int
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: TartiSdk.Padding, _ worker: any TartiSdk.CipherModeWorker) throws
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8> {
    var accumulated = Array(bytes)
    if isLast {
       
      accumulated = self.padding.add(to: accumulated, blockSize: self.blockSize - self.lastBlockRemainder)
    }

    var encrypted = Array<UInt8>(reserveCapacity: bytes.count)
    for chunk in accumulated.batched(by: self.blockSize) {
      encrypted += self.worker.encrypt(block: chunk)
    }

     
    if self.padding != .noPadding {
      self.lastBlockRemainder = encrypted.count.quotientAndRemainder(dividingBy: self.blockSize).remainder
    }

    if var finalizingWorker = worker as? FinalizingEncryptModeWorker, isLast == true {
      encrypted = Array(try finalizingWorker.finalize(encrypt: encrypted.slice))
    }

    return encrypted
  }
  @usableFromInline
  final internal func seek(to: Swift.Int) throws
  @objc @usableFromInline
  deinit
}
extension TartiSdk.CS.BigUInt {
  public init?<S>(_ text: S, radix: Swift.Int = 10) where S : Swift.StringProtocol
}
extension TartiSdk.CS.BigInt {
  public init?<S>(_ text: S, radix: Swift.Int = 10) where S : Swift.StringProtocol
}
extension Swift.String {
  public init(_ v: TartiSdk.CS.BigUInt)
  public init(_ v: TartiSdk.CS.BigUInt, radix: Swift.Int, uppercase: Swift.Bool = false)
  public init(_ value: TartiSdk.CS.BigInt, radix: Swift.Int = 10, uppercase: Swift.Bool = false)
}
extension TartiSdk.CS.BigUInt : Swift.ExpressibleByStringLiteral {
  public init(unicodeScalarLiteral value: Swift.UnicodeScalar)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.UnicodeScalar
}
extension TartiSdk.CS.BigInt : Swift.ExpressibleByStringLiteral {
  public init(unicodeScalarLiteral value: Swift.UnicodeScalar)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.UnicodeScalar
}
extension TartiSdk.CS.BigUInt : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TartiSdk.CS.BigInt : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension TartiSdk.CS.BigUInt : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
extension TartiSdk.CS.BigInt : Swift.CustomPlaygroundDisplayConvertible {
  public var playgroundDescription: Any {
    get
  }
}
extension TartiSdk.CS.BigUInt {
  public init?<T>(exactly source: T) where T : Swift.BinaryInteger
  public init<T>(_ source: T) where T : Swift.BinaryInteger
  public init<T>(truncatingIfNeeded source: T) where T : Swift.BinaryInteger
  public init<T>(clamping source: T) where T : Swift.BinaryInteger
}
extension TartiSdk.CS.BigInt {
  public init()
  public init(_ integer: TartiSdk.CS.BigUInt)
  public init<T>(_ source: T) where T : Swift.BinaryInteger
  public init?<T>(exactly source: T) where T : Swift.BinaryInteger
  public init<T>(clamping source: T) where T : Swift.BinaryInteger
  public init<T>(truncatingIfNeeded source: T) where T : Swift.BinaryInteger
}
extension TartiSdk.CS.BigUInt : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.UInt64)
  public typealias IntegerLiteralType = Swift.UInt64
}
extension TartiSdk.CS.BigInt : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.Int64)
  public typealias IntegerLiteralType = Swift.Int64
}
public protocol Authenticator {
  func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension TartiSdk.Blowfish {
  convenience public init(key: Swift.String, iv: Swift.String, padding: TartiSdk.Padding = .pkcs7) throws
}
public enum CipherError : Swift.Error {
  case encrypt
  case decrypt
  public static func == (a: TartiSdk.CipherError, b: TartiSdk.CipherError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Cipher : AnyObject {
  var keySize: Swift.Int { get }
  func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension TartiSdk.Cipher {
  public func encrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  public func decrypt(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension TartiSdk.CS.BigUInt : Swift.Comparable {
  public static func compare(_ a: TartiSdk.CS.BigUInt, _ b: TartiSdk.CS.BigUInt) -> Foundation.ComparisonResult
  public static func == (a: TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt) -> Swift.Bool
  public static func < (a: TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt) -> Swift.Bool
}
extension TartiSdk.CS.BigInt {
  public static func == (a: TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt) -> Swift.Bool
  public static func < (a: TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt) -> Swift.Bool
}
public struct CBC : TartiSdk.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: TartiSdk.CBC.Error, b: TartiSdk.CBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: TartiSdk.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
}
final public class Checksum {
  @usableFromInline
  internal static let table32: [Swift.UInt32]
  @usableFromInline
  internal static let table32c: [Swift.UInt32]
  @usableFromInline
  internal static let table16: [Swift.UInt16]
  @usableFromInline
  internal init()
  @inlinable final internal func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    var crc: UInt32 = seed != nil ? seed! : 0xFFFF_FFFF
    for chunk in message.batched(by: 256) {
      for b in chunk {
        let idx = Int((crc ^ UInt32(reflect ? b : reversed(b))) & 0xFF)
        crc = (crc >> 8) ^ Checksum.table32[idx]
      }
    }
    return (reflect ? crc : reversed(crc)) ^ 0xFFFF_FFFF
  }
  @inlinable final internal func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    var crc: UInt32 = seed != nil ? seed! : 0xFFFF_FFFF
    for chunk in message.batched(by: 256) {
      for b in chunk {
        let idx = Int((crc ^ UInt32(reflect ? b : reversed(b))) & 0xFF)
        crc = (crc >> 8) ^ Checksum.table32c[idx]
      }
    }
    return (reflect ? crc : reversed(crc)) ^ 0xFFFF_FFFF
  }
  @inlinable final internal func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16 {
    var crc: UInt16 = seed != nil ? seed! : 0x0000
    for chunk in message.batched(by: 256) {
      for b in chunk {
        crc = (crc >> 8) ^ Checksum.table16[Int((crc ^ UInt16(b)) & 0xFF)]
      }
    }
    return crc
  }
  @objc deinit
}
extension TartiSdk.Checksum {
  @inlinable public static func crc32(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    Checksum().crc32(message, seed: seed, reflect: reflect)
  }
  @inlinable public static func crc32c(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32 {
    Checksum().crc32c(message, seed: seed, reflect: reflect)
  }
  @inlinable public static func crc16(_ message: Swift.Array<Swift.UInt8>, seed: Swift.UInt16? = nil) -> Swift.UInt16 {
    Checksum().crc16(message, seed: seed)
  }
}
public protocol _UInt8Type {
}
extension Swift.UInt8 : TartiSdk._UInt8Type {
}
extension Swift.UInt8 {
  public func bits() -> [TartiSdk.Bit]
  public func bits() -> Swift.String
}
@usableFromInline
final internal class BlockEncryptor : TartiSdk.Cryptor, TartiSdk.Updatable {
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: TartiSdk.Padding, _ worker: any TartiSdk.CipherModeWorker) throws
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func seek(to: Swift.Int) throws
  @objc @usableFromInline
  deinit
}
final public class RSA {
  public enum Error : Swift.Error {
    case noPrivateKey
    case invalidInverseNotCoprimes
    case unsupportedRSAVersion
    case invalidPrimes
    case noPrimes
    case unableToCalculateCoefficient
    case invalidSignatureLength
    case invalidMessageLengthForSigning
    case invalidMessageLengthForEncryption
    case invalidDecryption
    public static func == (a: TartiSdk.RSA.Error, b: TartiSdk.RSA.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let n: TartiSdk.BigUInteger
  final public let e: TartiSdk.BigUInteger
  final public let d: TartiSdk.BigUInteger?
  final public let keySize: Swift.Int
  final public let keySizeBytes: Swift.Int
  public init(n: TartiSdk.BigUInteger, e: TartiSdk.BigUInteger, d: TartiSdk.BigUInteger? = nil)
  convenience public init(n: Swift.Array<Swift.UInt8>, e: Swift.Array<Swift.UInt8>, d: Swift.Array<Swift.UInt8>? = nil)
  convenience public init(keySize: Swift.Int) throws
  public init(n: TartiSdk.BigUInteger, e: TartiSdk.BigUInteger, d: TartiSdk.BigUInteger, p: TartiSdk.BigUInteger, q: TartiSdk.BigUInteger) throws
  @objc deinit
}
extension TartiSdk.RSA {
  convenience public init(rawRepresentation raw: Foundation.Data) throws
}
extension TartiSdk.RSA {
  final public func externalRepresentation() throws -> Foundation.Data
  final public func publicKeyExternalRepresentation() throws -> Foundation.Data
}
extension TartiSdk.CS.BigUInt {
  public static func generatePrime(_ width: Swift.Int) -> TartiSdk.BigUInteger
}
extension TartiSdk.RSA : Swift.CustomStringConvertible {
  final public var description: Swift.String {
    get
  }
}
public typealias byte = Swift.Int8
public typealias int = Swift.Int32
public typealias long = Swift.Int64
public typealias JSONObject = [Swift.String : Any]
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public var status_bar: UIKit.UIView {
    get
  }
}
extension Foundation.Date {
  public var milliseconds: TartiSdk.long {
    get
  }
}
extension Swift.Int {
  public var to_int: TartiSdk.int {
    get
  }
}
extension Swift.UInt8 {
  public var to_signed: TartiSdk.byte {
    get
  }
}
extension Swift.Int8 {
  public var to_unsigned: Swift.UInt8 {
    get
  }
  public var to_int: TartiSdk.int {
    get
  }
}
extension Swift.Int32 {
  public var to_byte: TartiSdk.byte {
    get
  }
  public var to_Int: Swift.Int {
    get
  }
}
extension Swift.Int64 {
  public var to_int: TartiSdk.int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BaseTask {
  public var comm: TartiSdk.Comm!
  public var type: TartiSdk.int!
  public func run()
  public func getType() -> TartiSdk.int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ByteArrayOutputStream {
  public func write(_ b: TartiSdk.int)
  public func write(_ b: [TartiSdk.byte])
  public func write(_ b: [TartiSdk.byte], _ off: TartiSdk.int, _ len: TartiSdk.int)
  public func toByteArray() -> [TartiSdk.byte]
  public func writeInt16(_ i: TartiSdk.int) -> TartiSdk.int
  public func writeInt24(_ i: TartiSdk.int) -> TartiSdk.int
  public func writeInt32(_ i: TartiSdk.int) -> TartiSdk.int
  public func writeBytes(Of data: TartiSdk.int, _ size: TartiSdk.int)
  @objc deinit
}
extension Swift.UInt64 {
  @_specialize(exported: false, kind: full, where T == Swift.ArraySlice<Swift.UInt8>)
  @inlinable internal init<T>(bytes: T, fromIndex index: T.Index) where T : Swift.Collection, T.Element == Swift.UInt8, T.Index == Swift.Int {
    if bytes.isEmpty {
      self = 0
      return
    }

    let count = bytes.count

    let val0 = count > 0 ? UInt64(bytes[index.advanced(by: 0)]) << 56 : 0
    let val1 = count > 1 ? UInt64(bytes[index.advanced(by: 1)]) << 48 : 0
    let val2 = count > 2 ? UInt64(bytes[index.advanced(by: 2)]) << 40 : 0
    let val3 = count > 3 ? UInt64(bytes[index.advanced(by: 3)]) << 32 : 0
    let val4 = count > 4 ? UInt64(bytes[index.advanced(by: 4)]) << 24 : 0
    let val5 = count > 5 ? UInt64(bytes[index.advanced(by: 5)]) << 16 : 0
    let val6 = count > 6 ? UInt64(bytes[index.advanced(by: 6)]) << 8 : 0
    let val7 = count > 7 ? UInt64(bytes[index.advanced(by: 7)]) : 0

    self = val0 | val1 | val2 | val3 | val4 | val5 | val6 | val7
  }
}
extension Swift.String {
  @inlinable public var bytes: Swift.Array<Swift.UInt8> {
    get {
    data(using: String.Encoding.utf8, allowLossyConversion: true)?.bytes ?? Array(utf8)
  }
  }
  @inlinable public func md5() -> Swift.String {
    self.bytes.md5().toHexString()
  }
  @inlinable public func sha1() -> Swift.String {
    self.bytes.sha1().toHexString()
  }
  @inlinable public func sha224() -> Swift.String {
    self.bytes.sha224().toHexString()
  }
  @inlinable public func sha256() -> Swift.String {
    self.bytes.sha256().toHexString()
  }
  @inlinable public func sha384() -> Swift.String {
    self.bytes.sha384().toHexString()
  }
  @inlinable public func sha512() -> Swift.String {
    self.bytes.sha512().toHexString()
  }
  @inlinable public func sha3(_ variant: TartiSdk.SHA3.Variant) -> Swift.String {
    self.bytes.sha3(variant).toHexString()
  }
  @inlinable public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String {
    self.bytes.crc32(seed: seed, reflect: reflect).bytes().toHexString()
  }
  @inlinable public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.String {
    self.bytes.crc32c(seed: seed, reflect: reflect).bytes().toHexString()
  }
  @inlinable public func crc16(seed: Swift.UInt16? = nil) -> Swift.String {
    self.bytes.crc16(seed: seed).bytes().toHexString()
  }
  @inlinable public func encrypt(cipher: any TartiSdk.Cipher) throws -> Swift.String {
    try self.bytes.encrypt(cipher: cipher).toHexString()
  }
  @inlinable public func encryptToBase64(cipher: any TartiSdk.Cipher) throws -> Swift.String {
    try self.bytes.encrypt(cipher: cipher).toBase64()
  }
  @inlinable public func authenticate<A>(with authenticator: A) throws -> Swift.String where A : TartiSdk.Authenticator {
    try self.bytes.authenticate(with: authenticator).toHexString()
  }
}
extension TartiSdk.CS {
  public struct BigUInt : Swift.UnsignedInteger {
    public typealias Word = Swift.UInt
    public init()
    public init(words: [TartiSdk.CS.BigUInt.Word])
    public typealias Magnitude = TartiSdk.CS.BigUInt
  }
}
extension TartiSdk.CS.BigUInt {
  public static var isSigned: Swift.Bool {
    get
  }
  public func signum() -> TartiSdk.CS.BigUInt
}
public struct ECB : TartiSdk.BlockMode {
  public let options: TartiSdk.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init()
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
}
final public class MD5 {
  public init()
  final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @objc deinit
}
extension TartiSdk.MD5 : TartiSdk.Updatable {
  final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
}
extension Swift.Collection where Self.Element == Swift.UInt8, Self.Index == Swift.Int {
  @inlinable internal func toUInt32Array() -> Swift.Array<Swift.UInt32> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 4)
    return Array<UInt32>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 4) {
        let val = UInt32(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
  @inlinable internal func toUInt64Array() -> Swift.Array<Swift.UInt64> {
    guard !isEmpty else {
      return []
    }

    let c = strideCount(from: startIndex, to: endIndex, by: 8)
    return Array<UInt64>(unsafeUninitializedCapacity: c) { buf, count in
      var counter = 0
      for idx in stride(from: startIndex, to: endIndex, by: 8) {
        let val = UInt64(bytes: self, fromIndex: idx).bigEndian
        buf[counter] = val
        counter += 1
      }
      count = counter
      assert(counter == c)
    }
  }
}
@usableFromInline
internal func strideCount(from: Swift.Int, to: Swift.Int, by: Swift.Int) -> Swift.Int
public typealias BigInteger = TartiSdk.CS.BigInt
public typealias BigUInteger = TartiSdk.CS.BigUInt
public enum CS {
}
@_hasMissingDesignatedInitializers public class Nuve {
  public var preferences: Foundation.UserDefaults {
    get
  }
  public func enableProgressing()
  public func disableProgressing()
  public enum Duration {
    case long
    case short
    public static func == (a: TartiSdk.Nuve.Duration, b: TartiSdk.Nuve.Duration) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func toastIt(_ message: Swift.String, _ duration: TartiSdk.Nuve.Duration, _ context: UIKit.UIViewController)
  public static func bytes_toHex(_ bytes: [TartiSdk.byte]) -> Swift.String
  public static func bytes_toHexa(_ bytes: [TartiSdk.byte]) -> Swift.String
  public static func arraycopy(_ original: [TartiSdk.byte], _ origin_offset: TartiSdk.int, _ copy: inout [TartiSdk.byte], _ copy_offset: TartiSdk.int, _ newLength: TartiSdk.int)
  public static func copyOf(_ original: [TartiSdk.byte], _ newLength: TartiSdk.int) -> [TartiSdk.byte]
  public static func copyOfRange(_ original: [TartiSdk.byte], _ from: TartiSdk.int, _ to: TartiSdk.int) -> [TartiSdk.byte]
  public static func getBytes(Of s: Swift.String) -> [TartiSdk.byte]
  public static func convertToUnsigned(from barr: [TartiSdk.byte]) -> [Swift.UInt8]
  public static func JSONStringify(_ value: Swift.AnyObject) -> Swift.String
  public static func toJSONmin(_ value: Swift.AnyObject) -> Swift.String
  public static func addAll(_ array1: [TartiSdk.byte], _ array2: [TartiSdk.byte]) -> [TartiSdk.byte]
  @objc deinit
}
@_inheritsConvenienceInitializers final public class CBCMAC : TartiSdk.CMAC {
  override final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  override public init(key: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WriteParametricUserTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
extension TartiSdk.CS.BigInt : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension TartiSdk.CS.BigUInt : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public typealias CipherOperationOnBlock = (_ block: Swift.ArraySlice<Swift.UInt8>) -> Swift.Array<Swift.UInt8>?
public protocol BlockMode {
  var options: TartiSdk.BlockModeOption { get }
  @inlinable func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
  var customBlockSize: Swift.Int? { get }
}
@usableFromInline
internal struct BatchedCollectionIndex<Base> where Base : Swift.Collection {
}
extension TartiSdk.BatchedCollectionIndex : Swift.Comparable {
  @usableFromInline
  internal static func == <BaseCollection>(lhs: TartiSdk.BatchedCollectionIndex<BaseCollection>, rhs: TartiSdk.BatchedCollectionIndex<BaseCollection>) -> Swift.Bool where BaseCollection : Swift.Collection
  @usableFromInline
  internal static func < <BaseCollection>(lhs: TartiSdk.BatchedCollectionIndex<BaseCollection>, rhs: TartiSdk.BatchedCollectionIndex<BaseCollection>) -> Swift.Bool where BaseCollection : Swift.Collection
}
@usableFromInline
internal struct BatchedCollection<Base> : Swift.Collection where Base : Swift.Collection {
  @usableFromInline
  internal init(base: Base, size: Swift.Int)
  @usableFromInline
  internal typealias Index = TartiSdk.BatchedCollectionIndex<Base>
  @usableFromInline
  internal var startIndex: TartiSdk.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal var endIndex: TartiSdk.BatchedCollection<Base>.Index {
    get
  }
  @usableFromInline
  internal func index(after idx: TartiSdk.BatchedCollection<Base>.Index) -> TartiSdk.BatchedCollection<Base>.Index
  @usableFromInline
  internal subscript(idx: TartiSdk.BatchedCollection<Base>.Index) -> Base.SubSequence {
    get
  }
  @usableFromInline
  internal typealias Element = Base.SubSequence
  @usableFromInline
  internal typealias Indices = Swift.DefaultIndices<TartiSdk.BatchedCollection<Base>>
  @usableFromInline
  internal typealias Iterator = Swift.IndexingIterator<TartiSdk.BatchedCollection<Base>>
  @usableFromInline
  internal typealias SubSequence = Swift.Slice<TartiSdk.BatchedCollection<Base>>
}
extension Swift.Collection {
  @inlinable internal func batched(by size: Swift.Int) -> TartiSdk.BatchedCollection<Self> {
    BatchedCollection(base: self, size: size)
  }
}
extension Swift.FixedWidthInteger {
  @inlinable internal func bytes(totalBytes: Swift.Int = MemoryLayout<Self>.size) -> Swift.Array<Swift.UInt8> {
    arrayOfBytes(value: self.littleEndian, length: totalBytes)
     
     
     
  }
}
@_hasMissingDesignatedInitializers public class Parsable {
  public var length: TartiSdk.int
  public var type: TartiSdk.int
  public var status: TartiSdk.int
  public var data: [TartiSdk.byte]
  public static func parsable(_ data: [TartiSdk.byte]) -> TartiSdk.Parsable
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WriteUserTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
final public class Rabbit {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    public static func == (a: TartiSdk.Rabbit.Error, b: TartiSdk.Rabbit.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let ivSize: Swift.Int
  public static let keySize: Swift.Int
  public static let blockSize: Swift.Int
  final public var keySize: Swift.Int {
    get
  }
  convenience public init(key: Swift.Array<Swift.UInt8>) throws
  public init(key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>?) throws
  @objc deinit
}
extension TartiSdk.Rabbit : TartiSdk.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension TartiSdk.CS.BigUInt {
  public mutating func multiply(byWord y: TartiSdk.CS.BigUInt.Word)
  public func multiplied(byWord y: TartiSdk.CS.BigUInt.Word) -> TartiSdk.CS.BigUInt
  public mutating func multiplyAndAdd(_ x: TartiSdk.CS.BigUInt, _ y: TartiSdk.CS.BigUInt.Word, shiftedBy shift: Swift.Int = 0)
  public func multiplied(by y: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public static var directMultiplicationLimit: Swift.Int
  public static func * (x: TartiSdk.CS.BigUInt, y: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public static func *= (a: inout TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt)
}
extension TartiSdk.CS.BigInt {
  public static func * (a: TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func *= (a: inout TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt)
}
@_hasMissingDesignatedInitializers public class Network {
  public var index: TartiSdk.int
  public var maxIndex: TartiSdk.int
  public var size: TartiSdk.int
  public var data: [TartiSdk.byte]
  public static func decodePacket(_ data: [TartiSdk.byte]) -> TartiSdk.Network
  public static func prepareSinglePacket(_ bytes: [TartiSdk.byte]) -> [[TartiSdk.byte]]
  public static func prepareMultiplePackets(_ bytes: [TartiSdk.byte]) -> [[TartiSdk.byte]]
  @objc deinit
}
extension TartiSdk.CS.BigUInt {
  public static func + (a: TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public static func += (a: inout TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt)
}
extension TartiSdk.CS.BigInt {
  public static func + (a: TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func += (a: inout TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt)
}
public protocol PaddingProtocol {
  func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
}
public enum Padding : TartiSdk.PaddingProtocol {
  case noPadding, zeroPadding, pkcs7, pkcs5, eme_pkcs1v15, emsa_pkcs1v15, iso78164, iso10126
  public func add(to: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8>
  public func remove(from: Swift.Array<Swift.UInt8>, blockSize: Swift.Int?) -> Swift.Array<Swift.UInt8>
  public static func == (a: TartiSdk.Padding, b: TartiSdk.Padding) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_specialize(exported: false, kind: full, where T == Swift.Int)
@_specialize(exported: false, kind: full, where T == Swift.UInt)
@_specialize(exported: false, kind: full, where T == Swift.UInt8)
@_specialize(exported: false, kind: full, where T == Swift.UInt16)
@_specialize(exported: false, kind: full, where T == Swift.UInt32)
@_specialize(exported: false, kind: full, where T == Swift.UInt64)
@inlinable internal func arrayOfBytes<T>(value: T, length totalBytes: Swift.Int = MemoryLayout<T>.size) -> Swift.Array<Swift.UInt8> where T : Swift.FixedWidthInteger {
  let valuePointer = UnsafeMutablePointer<T>.allocate(capacity: 1)
  valuePointer.pointee = value

  let bytesPointer = UnsafeMutablePointer<UInt8>(OpaquePointer(valuePointer))
  var bytes = Array<UInt8>(repeating: 0, count: totalBytes)
  for j in 0..<min(MemoryLayout<T>.size, totalBytes) {
    bytes[totalBytes - 1 - j] = (bytesPointer + j).pointee
  }

  valuePointer.deinitialize(count: 1)
  valuePointer.deallocate()

  return bytes
}
extension TartiSdk.CS.BigUInt {
  public subscript(bitAt index: Swift.Int) -> Swift.Bool {
    get
    set
  }
}
extension TartiSdk.CS.BigUInt {
  public var bitWidth: Swift.Int {
    get
  }
  public var leadingZeroBitCount: Swift.Int {
    get
  }
  public var trailingZeroBitCount: Swift.Int {
    get
  }
}
extension TartiSdk.CS.BigInt {
  public var bitWidth: Swift.Int {
    get
  }
  public var trailingZeroBitCount: Swift.Int {
    get
  }
}
extension TartiSdk.CS.BigUInt {
  public struct Words : Swift.RandomAccessCollection {
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: Swift.Int) -> TartiSdk.CS.BigUInt.Word {
      get
    }
    public typealias Element = TartiSdk.CS.BigUInt.Word
    public typealias Index = Swift.Int
    public typealias Indices = Swift.Range<Swift.Int>
    public typealias Iterator = Swift.IndexingIterator<TartiSdk.CS.BigUInt.Words>
    public typealias SubSequence = Swift.Slice<TartiSdk.CS.BigUInt.Words>
  }
  public var words: TartiSdk.CS.BigUInt.Words {
    get
  }
  public init<Words>(words: Words) where Words : Swift.Sequence, Words.Element == Swift.UInt
}
extension TartiSdk.CS.BigInt {
  public struct Words : Swift.RandomAccessCollection {
    public typealias Indices = Swift.CountableRange<Swift.Int>
    public var count: Swift.Int {
      get
    }
    public var indices: TartiSdk.CS.BigInt.Words.Indices {
      get
    }
    public var startIndex: Swift.Int {
      get
    }
    public var endIndex: Swift.Int {
      get
    }
    public subscript(index: Swift.Int) -> Swift.UInt {
      get
    }
    public typealias Element = Swift.UInt
    public typealias Index = Swift.Int
    public typealias Iterator = Swift.IndexingIterator<TartiSdk.CS.BigInt.Words>
    public typealias SubSequence = Swift.Slice<TartiSdk.CS.BigInt.Words>
  }
  public var words: TartiSdk.CS.BigInt.Words {
    get
  }
  public init<S>(words: S) where S : Swift.Sequence, S.Element == Swift.UInt
}
public struct CCM {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case invalidParameter
    case fail
    public static func == (a: TartiSdk.CCM.Error, b: TartiSdk.CCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: TartiSdk.BlockModeOption
  public let customBlockSize: Swift.Int?
  public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public init(iv: Swift.Array<Swift.UInt8>, tagLength: Swift.Int, messageLength: Swift.Int, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
}
@_hasMissingDesignatedInitializers public class WriteAppIdTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BaseHandler {
  public var _tag: Swift.String!
  public var context: UIKit.UIViewController!
  public var device: CoreBluetooth.CBPeripheral!
  public var scale: TartiSdk.Scale!
  public var lastTask: TartiSdk.BaseTask!
  public var comm: TartiSdk.Comm!
  public func scheduleTask(_ task: TartiSdk.BaseTask)
  public func processData(_ data: [TartiSdk.byte])
  @objc deinit
}
final public class GCM : TartiSdk.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: TartiSdk.GCM.Mode, b: TartiSdk.GCM.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: TartiSdk.BlockModeOption
  public enum Error : Swift.Error {
    case invalidInitializationVector
    case fail
    public static func == (a: TartiSdk.GCM.Error, b: TartiSdk.GCM.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let customBlockSize: Swift.Int?
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(iv: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: TartiSdk.GCM.Mode = .detached)
  convenience public init(iv: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: TartiSdk.GCM.Mode = .detached)
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
  @objc deinit
}
extension TartiSdk.CS.BigUInt {
  public init?<T>(exactly source: T) where T : Swift.BinaryFloatingPoint
  public init<T>(_ source: T) where T : Swift.BinaryFloatingPoint
}
extension TartiSdk.CS.BigInt {
  public init?<T>(exactly source: T) where T : Swift.BinaryFloatingPoint
  public init<T>(_ source: T) where T : Swift.BinaryFloatingPoint
}
extension Swift.BinaryFloatingPoint where Self.RawExponent : Swift.FixedWidthInteger, Self.RawSignificand : Swift.FixedWidthInteger {
  public init(_ value: TartiSdk.CS.BigInt)
  public init(_ value: TartiSdk.CS.BigUInt)
}
public class BlockDecryptor : TartiSdk.Cryptor, TartiSdk.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal let padding: TartiSdk.Padding
  @usableFromInline
  internal var worker: any TartiSdk.CipherModeWorker
  @usableFromInline
  internal var accumulated: [Swift.UInt8]
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: TartiSdk.Padding, _ worker: any TartiSdk.CipherModeWorker) throws
  @inlinable public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

     
     
    if !isLast && self.accumulated.count < self.blockSize + self.worker.additionalBufferSize {
      return []
    }

    let accumulatedWithoutSuffix: Array<UInt8>
    if self.worker.additionalBufferSize > 0 {
       
      accumulatedWithoutSuffix = Array(self.accumulated.prefix(self.accumulated.count - self.worker.additionalBufferSize))
    } else {
      accumulatedWithoutSuffix = self.accumulated
    }

    var processedBytesCount = 0
    var plaintext = Array<UInt8>(reserveCapacity: accumulatedWithoutSuffix.count)
     
    for var chunk in accumulatedWithoutSuffix.batched(by: self.blockSize) {
      if isLast || (accumulatedWithoutSuffix.count - processedBytesCount) >= blockSize {
        let isLastChunk = processedBytesCount + chunk.count == accumulatedWithoutSuffix.count

        if isLast, isLastChunk, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
          chunk = try finalizingWorker.willDecryptLast(bytes: chunk + accumulated.suffix(worker.additionalBufferSize))  
        }

        if !chunk.isEmpty {
          plaintext += worker.decrypt(block: chunk)
        }

        if isLast, isLastChunk, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
          plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
        }

        processedBytesCount += chunk.count
      }
    }
    accumulated.removeFirst(processedBytesCount)  

    if isLast {
      if accumulatedWithoutSuffix.isEmpty, var finalizingWorker = worker as? FinalizingDecryptModeWorker {
        try finalizingWorker.willDecryptLast(bytes: self.accumulated.suffix(self.worker.additionalBufferSize))
        plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
      }
      plaintext = self.padding.remove(from: plaintext, blockSize: self.blockSize)
    }

    return plaintext
  }
  public func seek(to position: Swift.Int) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetLastMeasurementCountTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
public protocol Updatable {
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8>
  mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws
}
extension TartiSdk.Updatable {
  @inlinable public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    let processed = try update(withBytes: bytes, isLast: isLast)
    if !processed.isEmpty {
      output(processed)
    }
  }
  @inlinable public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes, isLast: isLast)
  }
  @inlinable public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes.slice, isLast: isLast)
  }
  @inlinable public mutating func update(withBytes bytes: Swift.Array<Swift.UInt8>, isLast: Swift.Bool = false, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.update(withBytes: bytes.slice, isLast: isLast, output: output)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: bytes, isLast: true)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    try self.finish(withBytes: bytes.slice)
  }
  @inlinable public mutating func finish() throws -> Swift.Array<Swift.UInt8> {
    try self.update(withBytes: [], isLast: true)
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    let processed = try update(withBytes: bytes, isLast: true)
    if !processed.isEmpty {
      output(processed)
    }
  }
  @inlinable public mutating func finish(withBytes bytes: Swift.Array<Swift.UInt8>, output: (_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.finish(withBytes: bytes.slice, output: output)
  }
  @inlinable public mutating func finish(output: (Swift.Array<Swift.UInt8>) -> Swift.Void) throws {
    try self.finish(withBytes: [], output: output)
  }
}
extension TartiSdk.RSA : TartiSdk.Signature {
  final public func sign(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func sign(_ bytes: Swift.Array<Swift.UInt8>, variant: TartiSdk.RSA.SignatureVariant) throws -> Swift.Array<Swift.UInt8>
  final public func verify(signature: Swift.ArraySlice<Swift.UInt8>, for expectedData: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Bool
  final public func verify(signature: Swift.Array<Swift.UInt8>, for bytes: Swift.Array<Swift.UInt8>, variant: TartiSdk.RSA.SignatureVariant) throws -> Swift.Bool
}
extension TartiSdk.RSA {
  public enum SignatureVariant {
    case raw
    case message_pkcs1v15_MD5
    case message_pkcs1v15_SHA1
    case message_pkcs1v15_SHA224
    case message_pkcs1v15_SHA256
    case message_pkcs1v15_SHA384
    case message_pkcs1v15_SHA512
    case message_pkcs1v15_SHA512_224
    case message_pkcs1v15_SHA512_256
    case digest_pkcs1v15_RAW
    case digest_pkcs1v15_MD5
    case digest_pkcs1v15_SHA1
    case digest_pkcs1v15_SHA224
    case digest_pkcs1v15_SHA256
    case digest_pkcs1v15_SHA384
    case digest_pkcs1v15_SHA512
    case digest_pkcs1v15_SHA512_224
    case digest_pkcs1v15_SHA512_256
    public static func == (a: TartiSdk.RSA.SignatureVariant, b: TartiSdk.RSA.SignatureVariant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TartiSdk.RSA : TartiSdk.Cipher {
  @inlinable final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    return try self.encrypt(Array<UInt8>(bytes), variant: .pksc1v15)
  }
  @inlinable final public func encrypt(_ bytes: Swift.Array<Swift.UInt8>, variant: TartiSdk.RSA.RSAEncryptionVariant) throws -> Swift.Array<Swift.UInt8> {
     
    let preparedData = try variant.prepare(bytes, blockSize: self.keySizeBytes)

     
    return try variant.formatEncryptedBytes(self.encryptPreparedBytes(preparedData), blockSize: self.keySizeBytes)
  }
  @inlinable final internal func encryptPreparedBytes(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
     
    return BigUInteger(Data(bytes)).power(self.e, modulus: self.n).serialize().bytes
  }
  @inlinable final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
    return try self.decrypt(Array<UInt8>(bytes), variant: .pksc1v15)
  }
  @inlinable final public func decrypt(_ bytes: Swift.Array<Swift.UInt8>, variant: TartiSdk.RSA.RSAEncryptionVariant) throws -> Swift.Array<Swift.UInt8> {
     
    let decrypted = try self.decryptPreparedBytes(bytes)

     
    return variant.removePadding(decrypted, blockSize: self.keySizeBytes)
  }
  @inlinable final internal func decryptPreparedBytes(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8> {
     
    guard let d = d else { throw RSA.Error.noPrivateKey }

     
    return BigUInteger(Data(bytes)).power(d, modulus: self.n).serialize().bytes
  }
}
extension TartiSdk.RSA {
  @frozen public enum RSAEncryptionVariant {
    case unsafe
    case raw
    case pksc1v15
    @inlinable internal func prepare(_ bytes: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) throws -> Swift.Array<Swift.UInt8> {
      switch self {
        case .unsafe:
          return bytes
        case .raw:
           
           
          guard blockSize >= bytes.count + 11 else { throw RSA.Error.invalidMessageLengthForEncryption }
          return Array(repeating: 0x00, count: blockSize - bytes.count) + bytes
        case .pksc1v15:
           
          guard !bytes.isEmpty else { throw RSA.Error.invalidMessageLengthForEncryption }
           
          guard blockSize >= bytes.count + 11 else { throw RSA.Error.invalidMessageLengthForEncryption }
          return Padding.eme_pkcs1v15.add(to: bytes, blockSize: blockSize)
      }
    }
    @inlinable internal func formatEncryptedBytes(_ bytes: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8> {
      switch self {
        case .unsafe:
          return bytes
        case .raw, .pksc1v15:
           
          return Array<UInt8>(repeating: 0x00, count: blockSize - bytes.count) + bytes
      }
    }
    @inlinable internal func removePadding(_ bytes: Swift.Array<Swift.UInt8>, blockSize: Swift.Int) -> Swift.Array<Swift.UInt8> {
      switch self {
        case .unsafe:
          return bytes
        case .raw:
          return bytes
        case .pksc1v15:
           
           
          return Padding.eme_pkcs1v15.remove(from: [0x00] + bytes, blockSize: blockSize)
      }
    }
    public static func == (a: TartiSdk.RSA.RSAEncryptionVariant, b: TartiSdk.RSA.RSAEncryptionVariant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TartiSdk.CS.BigUInt {
  public static func >>= <Other>(lhs: inout TartiSdk.CS.BigUInt, rhs: Other) where Other : Swift.BinaryInteger
  public static func <<= <Other>(lhs: inout TartiSdk.CS.BigUInt, rhs: Other) where Other : Swift.BinaryInteger
  public static func >> <Other>(lhs: TartiSdk.CS.BigUInt, rhs: Other) -> TartiSdk.CS.BigUInt where Other : Swift.BinaryInteger
  public static func << <Other>(lhs: TartiSdk.CS.BigUInt, rhs: Other) -> TartiSdk.CS.BigUInt where Other : Swift.BinaryInteger
}
extension TartiSdk.CS.BigInt {
  public static func &<< (left: TartiSdk.CS.BigInt, right: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func &<<= (left: inout TartiSdk.CS.BigInt, right: TartiSdk.CS.BigInt)
  public static func &>> (left: TartiSdk.CS.BigInt, right: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func &>>= (left: inout TartiSdk.CS.BigInt, right: TartiSdk.CS.BigInt)
  public static func << <Other>(lhs: TartiSdk.CS.BigInt, rhs: Other) -> TartiSdk.CS.BigInt where Other : Swift.BinaryInteger
  public static func <<= <Other>(lhs: inout TartiSdk.CS.BigInt, rhs: Other) where Other : Swift.BinaryInteger
  public static func >> <Other>(lhs: TartiSdk.CS.BigInt, rhs: Other) -> TartiSdk.CS.BigInt where Other : Swift.BinaryInteger
  public static func >>= <Other>(lhs: inout TartiSdk.CS.BigInt, rhs: Other) where Other : Swift.BinaryInteger
}
public typealias JSON = Swift.Dictionary<Swift.String, Any>
extension Swift.Dictionary where Key == Swift.String, Value == Any {
  public var jsonStringify: Swift.String? {
    get
  }
}
extension Swift.String {
  public var toJSON: Swift.Dictionary<Swift.String, Any>? {
    get
  }
}
@_hasMissingDesignatedInitializers public class AmOrBcmTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
extension TartiSdk.CS.BigUInt {
  public func greatestCommonDivisor(with b: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public func inverse(_ modulus: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt?
}
extension TartiSdk.CS.BigInt {
  public func greatestCommonDivisor(with b: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public func inverse(_ modulus: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt?
}
public class NuveBluetooth {
  public var miBand2: TartiSdk.MIBand2 {
    get
  }
  public init(_ ncallback: any TartiSdk.NCallback)
  public func setDevice(_ model: Swift.String)
  public func setDevice(_ model: Swift.String, _ mac: Swift.String)
  public func setTest()
  public func cancelMeasuring()
  public func pair(_ deviceCode: Swift.String)
  public func measure(_ tare: Swift.String, _ gender: Swift.String, _ figure: Swift.String, _ height: Swift.String, _ birth: Swift.String)
  public func onlyWeight(_ tare: Swift.String)
  public func boyOLC()
  public func connectToMiBand2()
  public func setLicense(licenseKey: Swift.String)
  @objc deinit
}
@usableFromInline
final internal class StreamDecryptor : TartiSdk.Cryptor, TartiSdk.Updatable {
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal var worker: any TartiSdk.CipherModeWorker
  @usableFromInline
  final internal let padding: TartiSdk.Padding
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var lastBlockRemainder: Swift.Int
  @usableFromInline
  internal init(blockSize: Swift.Int, padding: TartiSdk.Padding, _ worker: any TartiSdk.CipherModeWorker) throws
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    let toProcess = self.accumulated.prefix(max(self.accumulated.count - self.worker.additionalBufferSize, 0))

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
       
      try finalizingWorker.willDecryptLast(bytes: self.accumulated.slice)
    }

    var processedBytesCount = 0
    var plaintext = Array<UInt8>(reserveCapacity: bytes.count + self.worker.additionalBufferSize)
    for chunk in toProcess.batched(by: self.blockSize) {
      plaintext += self.worker.decrypt(block: chunk)
      processedBytesCount += chunk.count
    }

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      plaintext = Array(try finalizingWorker.didDecryptLast(bytes: plaintext.slice))
    }

     
    if self.padding != .noPadding {
      self.lastBlockRemainder = plaintext.count.quotientAndRemainder(dividingBy: self.blockSize).remainder
    }

    if isLast {
       
      plaintext = self.padding.remove(from: plaintext, blockSize: self.blockSize - self.lastBlockRemainder)
    }

    self.accumulated.removeFirst(processedBytesCount)  

    if var finalizingWorker = worker as? FinalizingDecryptModeWorker, isLast == true {
      plaintext = Array(try finalizingWorker.finalize(decrypt: plaintext.slice))
    }

    return plaintext
  }
  @inlinable final public func seek(to position: Swift.Int) throws {
    guard var worker = self.worker as? SeekableModeWorker else {
      fatalError("Not supported")
    }

    try worker.seek(to: position)
    self.worker = worker
  }
  @objc @usableFromInline
  deinit
}
@_hasMissingDesignatedInitializers public class MeasurementWriteAppIdTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
extension TartiSdk.CS.BigUInt {
  public mutating func subtractReportingOverflow(_ b: TartiSdk.CS.BigUInt, shiftedBy shift: Swift.Int = 0) -> Swift.Bool
  public func subtractingReportingOverflow(_ other: TartiSdk.CS.BigUInt, shiftedBy shift: Swift.Int) -> (partialValue: TartiSdk.CS.BigUInt, overflow: Swift.Bool)
  public func subtractingReportingOverflow(_ other: TartiSdk.CS.BigUInt) -> (partialValue: TartiSdk.CS.BigUInt, overflow: Swift.Bool)
  public mutating func subtract(_ other: TartiSdk.CS.BigUInt, shiftedBy shift: Swift.Int = 0)
  public func subtracting(_ other: TartiSdk.CS.BigUInt, shiftedBy shift: Swift.Int = 0) -> TartiSdk.CS.BigUInt
  public mutating func decrement(shiftedBy shift: Swift.Int = 0)
  public static func - (a: TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public static func -= (a: inout TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt)
}
extension TartiSdk.CS.BigInt {
  public mutating func negate()
  public static func - (a: TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func -= (a: inout TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt)
}
extension TartiSdk.XChaCha20 {
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
extension TartiSdk.HMAC {
  convenience public init(key: Swift.String, variant: TartiSdk.HMAC.Variant = .md5) throws
}
public protocol NCallback {
  func log(_ value: Swift.String, _ type: TartiSdk.NCallbackType)
  func toast(_ msg: Swift.String, _ duration: TartiSdk.NDuration)
  func result(_ result: TartiSdk.JSON)
  func dismiss(_ dismissType: TartiSdk.NDismissType)
  func connectionStatus(_ connectionStatusType: TartiSdk.NConnectionStatusType)
}
@_hasMissingDesignatedInitializers public class MeasureTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Measurement {
  public func toFString() -> Swift.String
  public func toString() -> Swift.String
  public func toJSON() -> Swift.String
  @objc deinit
}
extension TartiSdk.CS.BigUInt {
  public func quotientAndRemainder(dividingBy y: TartiSdk.CS.BigUInt) -> (quotient: TartiSdk.CS.BigUInt, remainder: TartiSdk.CS.BigUInt)
  public static func / (x: TartiSdk.CS.BigUInt, y: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public static func % (x: TartiSdk.CS.BigUInt, y: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public static func /= (x: inout TartiSdk.CS.BigUInt, y: TartiSdk.CS.BigUInt)
  public static func %= (x: inout TartiSdk.CS.BigUInt, y: TartiSdk.CS.BigUInt)
}
extension TartiSdk.CS.BigInt {
  public func quotientAndRemainder(dividingBy y: TartiSdk.CS.BigInt) -> (quotient: TartiSdk.CS.BigInt, remainder: TartiSdk.CS.BigInt)
  public static func / (a: TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func % (a: TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public func modulus(_ mod: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
}
extension TartiSdk.CS.BigInt {
  public static func /= (a: inout TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt)
  public static func %= (a: inout TartiSdk.CS.BigInt, b: TartiSdk.CS.BigInt)
}
public struct CFB : TartiSdk.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: TartiSdk.CFB.Error, b: TartiSdk.CFB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum SegmentSize : Swift.Int {
    case cfb8
    case cfb128
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let options: TartiSdk.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>, segmentSize: TartiSdk.CFB.SegmentSize = .cfb128)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
}
@_hasMissingDesignatedInitializers public class WriteCurrentTimeTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
final public class SHA3 {
  final public let blockSize: Swift.Int
  final public let digestLength: Swift.Int
  final public let markByte: Swift.UInt8
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var accumulatedHash: Swift.Array<Swift.UInt64>
  public enum Variant {
    case sha224, sha256, sha384, sha512, keccak224, keccak256, keccak384, keccak512
    public var outputLength: Swift.Int {
      get
    }
    public static func == (a: TartiSdk.SHA3.Variant, b: TartiSdk.SHA3.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(variant: TartiSdk.SHA3.Variant)
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func process(block chunk: Swift.ArraySlice<Swift.UInt64>, currentHash hh: inout Swift.Array<Swift.UInt64>)
  @objc deinit
}
extension TartiSdk.SHA3 : TartiSdk.Updatable {
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
       
      let markByteIndex = self.accumulated.count

       
      let r = self.blockSize * 8
      let q = (r / 8) - (accumulated.count % (r / 8))
      self.accumulated += Array<UInt8>(repeating: 0, count: q)

      self.accumulated[markByteIndex] |= self.markByte
      self.accumulated[self.accumulated.count - 1] |= 0x80
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: self.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= self.blockSize {
        self.process(block: chunk.toUInt64Array().slice, currentHash: &self.accumulatedHash)
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)

     
    let result = self.accumulatedHash.reduce(into: Array<UInt8>()) { (result, value) in
      result += value.bigEndian.bytes()
    }

     
    if isLast {
      self.accumulatedHash = Array<UInt64>(repeating: 0, count: self.digestLength)
    }

    return Array(result[0..<self.digestLength])
  }
}
@_hasMissingDesignatedInitializers public class Measure : TartiSdk.BaseHandler {
  override public func scheduleTask(_ task: TartiSdk.BaseTask)
  public func getMeasurements(_ device: CoreBluetooth.CBPeripheral)
  override public func processData(_ data: [TartiSdk.byte])
  public func run(_ mac: Swift.String)
  public func setUserDataArgs(_ tare: Swift.Double, _ gender: TartiSdk.int, _ body_type: TartiSdk.int, _ height: TartiSdk.int, _ birth_date: Swift.String)
  public func getUserData() -> TartiSdk.User
  public func disconnect()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Scale {
  public func isKnown() -> Swift.Bool
  public func toString() -> Swift.String
  @objc deinit
}
extension TartiSdk.CS {
  public struct BigInt : Swift.SignedInteger {
    public enum Sign {
      case plus
      case minus
      public static func == (a: TartiSdk.CS.BigInt.Sign, b: TartiSdk.CS.BigInt.Sign) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public typealias Magnitude = TartiSdk.CS.BigUInt
    public typealias Word = TartiSdk.CS.BigUInt.Word
    public static var isSigned: Swift.Bool {
      get
    }
    public var magnitude: TartiSdk.CS.BigUInt
    public var sign: TartiSdk.CS.BigInt.Sign
    public init(sign: TartiSdk.CS.BigInt.Sign, magnitude: TartiSdk.CS.BigUInt)
    public var isZero: Swift.Bool {
      get
    }
    public func signum() -> TartiSdk.CS.BigInt
  }
}
@_hasMissingDesignatedInitializers final public class ChaCha20 {
  public enum Error : Swift.Error {
    case invalidKeyOrInitializationVector
    case notSupported
    public static func == (a: TartiSdk.ChaCha20.Error, b: TartiSdk.ChaCha20.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let blockSize: Swift.Int
  final public let keySize: Swift.Int
  convenience public init(key: Swift.Array<Swift.UInt8>, iv nonce: Swift.Array<Swift.UInt8>) throws
  @objc deinit
}
extension TartiSdk.ChaCha20 : TartiSdk.Cipher {
  final public func encrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  final public func decrypt(_ bytes: Swift.ArraySlice<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
}
extension TartiSdk.ChaCha20 {
  public struct ChaChaEncryptor : TartiSdk.Cryptor, TartiSdk.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension TartiSdk.ChaCha20 {
  public struct ChaChaDecryptor : TartiSdk.Cryptor, TartiSdk.Updatable {
    public mutating func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = true) throws -> Swift.Array<Swift.UInt8>
    public func seek(to: Swift.Int) throws
  }
}
extension TartiSdk.ChaCha20 : TartiSdk.Cryptors {
  final public func makeEncryptor() -> any TartiSdk.Cryptor & TartiSdk.Updatable
  final public func makeDecryptor() -> any TartiSdk.Cryptor & TartiSdk.Updatable
}
extension TartiSdk.ChaCha20 {
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
public protocol Cryptor {
  mutating func seek(to: Swift.Int) throws
}
@_hasMissingDesignatedInitializers final public class AEADChaCha20Poly1305 : TartiSdk.AEAD {
  public static let kLen: Swift.Int
  public static var ivRange: Swift.Range<Swift.Int>
  public static func encrypt(_ plainText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>) throws -> (cipherText: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>)
  public static func encrypt(cipher: any TartiSdk.Cipher, _ plainText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>) throws -> (cipherText: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>)
  public static func decrypt(_ cipherText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>) throws -> (plainText: Swift.Array<Swift.UInt8>, success: Swift.Bool)
  @objc deinit
}
extension Foundation.Data {
  public func checksum() -> Swift.UInt16
  public func md5() -> Foundation.Data
  public func sha1() -> Foundation.Data
  public func sha224() -> Foundation.Data
  public func sha256() -> Foundation.Data
  public func sha384() -> Foundation.Data
  public func sha512() -> Foundation.Data
  public func sha3(_ variant: TartiSdk.SHA3.Variant) -> Foundation.Data
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Foundation.Data
  public func crc16(seed: Swift.UInt16? = nil) -> Foundation.Data
  public func encrypt(cipher: any TartiSdk.Cipher) throws -> Foundation.Data
  public func decrypt(cipher: any TartiSdk.Cipher) throws -> Foundation.Data
  public func authenticate(with authenticator: any TartiSdk.Authenticator) throws -> Foundation.Data
}
extension Foundation.Data {
  public init(hex: Swift.String)
  public var bytes: Swift.Array<Swift.UInt8> {
    get
  }
  public func toHexString() -> Swift.String
}
final public class OCB : TartiSdk.BlockMode {
  public enum Mode {
    case combined
    case detached
    public static func == (a: TartiSdk.OCB.Mode, b: TartiSdk.OCB.Mode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let options: TartiSdk.BlockModeOption
  public enum Error : Swift.Error {
    case invalidNonce
    case fail
    public static func == (a: TartiSdk.OCB.Error, b: TartiSdk.OCB.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let customBlockSize: Swift.Int?
  final public var authenticationTag: Swift.Array<Swift.UInt8>?
  public init(nonce N: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, tagLength: Swift.Int = 16, mode: TartiSdk.OCB.Mode = .detached)
  @inlinable convenience public init(nonce N: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>, additionalAuthenticatedData: Swift.Array<Swift.UInt8>? = nil, mode: TartiSdk.OCB.Mode = .detached) {
    self.init(nonce: N, additionalAuthenticatedData: additionalAuthenticatedData, tagLength: authenticationTag.count, mode: mode)
    self.authenticationTag = authenticationTag
  }
  final public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
  @objc deinit
}
public protocol AEAD {
  static var kLen: Swift.Int { get }
  static var ivRange: Swift.Range<Swift.Int> { get }
}
extension TartiSdk.CS.BigUInt {
  prefix public static func ~ (a: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigUInt
  public static func |= (a: inout TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt)
  public static func &= (a: inout TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt)
  public static func ^= (a: inout TartiSdk.CS.BigUInt, b: TartiSdk.CS.BigUInt)
}
extension TartiSdk.CS.BigInt {
  prefix public static func ~ (x: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func & (lhs: inout TartiSdk.CS.BigInt, rhs: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func | (lhs: inout TartiSdk.CS.BigInt, rhs: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func ^ (lhs: inout TartiSdk.CS.BigInt, rhs: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt
  public static func &= (lhs: inout TartiSdk.CS.BigInt, rhs: TartiSdk.CS.BigInt)
  public static func |= (lhs: inout TartiSdk.CS.BigInt, rhs: TartiSdk.CS.BigInt)
  public static func ^= (lhs: inout TartiSdk.CS.BigInt, rhs: TartiSdk.CS.BigInt)
}
extension Swift.String {
  public func decryptBase64ToString(cipher: any TartiSdk.Cipher) throws -> Swift.String
  public func decryptBase64(cipher: any TartiSdk.Cipher) throws -> Swift.Array<Swift.UInt8>
}
@objc @_hasMissingDesignatedInitializers public class Comm : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  public func schedule(_ task: TartiSdk.BaseTask)
  public func writeData(_ data: TartiSdk.SerializationBuffer)
  public func writeRaw(_ data: [TartiSdk.byte])
  public func scan(_ handler: TartiSdk.BaseHandler, _ mac: Swift.String)
  public func disconnect()
  public func setIsBond(_ isBond: Swift.Bool)
  public func setIsMeasure(_ isMeasure: Swift.Bool)
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc deinit
}
public protocol TartiSdkProtocol {
  func didCallHello()
}
@objc @_inheritsConvenienceInitializers open class TartiSdk : ObjectiveC.NSObject {
  public static let shared: TartiSdk.TartiSdk
  public var delegate: (any TartiSdk.TartiSdkProtocol)?
  open func hello()
  @objc override dynamic public init()
  @objc deinit
}
final public class HMAC : TartiSdk.Authenticator {
  public enum Error : Swift.Error {
    case authenticateError
    case invalidInput
    public static func == (a: TartiSdk.HMAC.Error, b: TartiSdk.HMAC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Variant {
    case md5
    case sha1
    case sha2(TartiSdk.SHA2.Variant)
    case sha3(TartiSdk.SHA3.Variant)
    @available(*, deprecated, message: "Use sha2(variant) instead.")
    case sha256, sha384, sha512
  }
  public init(key: Swift.Array<Swift.UInt8>, variant: TartiSdk.HMAC.Variant = .md5)
  final public func authenticate(_ bytes: Swift.Array<Swift.UInt8>) throws -> Swift.Array<Swift.UInt8>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SerializationBuffer {
  public func toBuffer() -> [TartiSdk.byte]
  @objc deinit
}
extension TartiSdk.Rabbit {
  convenience public init(key: Swift.String) throws
  convenience public init(key: Swift.String, iv: Swift.String) throws
}
final public class SHA2 {
  @usableFromInline
  final internal let variant: TartiSdk.SHA2.Variant
  @usableFromInline
  final internal let size: Swift.Int
  @usableFromInline
  final internal let blockSize: Swift.Int
  @usableFromInline
  final internal let digestLength: Swift.Int
  @usableFromInline
  final internal var accumulated: [Swift.UInt8]
  @usableFromInline
  final internal var processedBytesTotalCount: Swift.Int
  @usableFromInline
  final internal var accumulatedHash32: [Swift.UInt32]
  @usableFromInline
  final internal var accumulatedHash64: [Swift.UInt64]
  @frozen public enum Variant : Swift.RawRepresentable {
    case sha224, sha256, sha384, sha512
    public var digestLength: Swift.Int {
      get
    }
    public var blockSize: Swift.Int {
      get
    }
    public typealias RawValue = Swift.Int
    public var rawValue: TartiSdk.SHA2.Variant.RawValue {
      get
    }
    public init?(rawValue: TartiSdk.SHA2.Variant.RawValue)
    @usableFromInline
    internal var h: Swift.Array<Swift.UInt64> {
      get
    }
    @usableFromInline
    internal var finalLength: Swift.Int {
      get
    }
  }
  public init(variant: TartiSdk.SHA2.Variant)
  @inlinable final public func calculate(for bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8> {
    do {
      return try update(withBytes: bytes.slice, isLast: true)
    } catch {
      return []
    }
  }
  final public func callAsFunction(_ bytes: Swift.Array<Swift.UInt8>) -> Swift.Array<Swift.UInt8>
  @usableFromInline
  final internal func process64(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.Array<Swift.UInt64>)
  @usableFromInline
  final internal func process32(block chunk: Swift.ArraySlice<Swift.UInt8>, currentHash hh: inout Swift.Array<Swift.UInt32>)
  @objc deinit
}
extension TartiSdk.SHA2 : TartiSdk.Updatable {
  @inlinable final public func update(withBytes bytes: Swift.ArraySlice<Swift.UInt8>, isLast: Swift.Bool = false) throws -> Swift.Array<Swift.UInt8> {
    self.accumulated += bytes

    if isLast {
      let lengthInBits = (processedBytesTotalCount + self.accumulated.count) * 8
      let lengthBytes = lengthInBits.bytes(totalBytes: self.blockSize / 8)  

       
      bitPadding(to: &self.accumulated, blockSize: self.blockSize, allowance: self.blockSize / 8)

       
      self.accumulated += lengthBytes
    }

    var processedBytes = 0
    for chunk in self.accumulated.batched(by: self.blockSize) {
      if isLast || (self.accumulated.count - processedBytes) >= self.blockSize {
        switch self.variant {
          case .sha224, .sha256:
            self.process32(block: chunk, currentHash: &self.accumulatedHash32)
          case .sha384, .sha512:
            self.process64(block: chunk, currentHash: &self.accumulatedHash64)
          }
        processedBytes += chunk.count
      }
    }
    self.accumulated.removeFirst(processedBytes)
    self.processedBytesTotalCount += processedBytes

     
    var result = Array<UInt8>(repeating: 0, count: variant.digestLength)
    switch self.variant {
      case .sha224, .sha256:
        var pos = 0
        for idx in 0..<self.accumulatedHash32.count where idx < self.variant.finalLength {
          let h = accumulatedHash32[idx]
          result[pos + 0] = UInt8((h >> 24) & 0xff)
          result[pos + 1] = UInt8((h >> 16) & 0xff)
          result[pos + 2] = UInt8((h >> 8) & 0xff)
          result[pos + 3] = UInt8(h & 0xff)
          pos += 4
        }
      case .sha384, .sha512:
        var pos = 0
        for idx in 0..<self.accumulatedHash64.count where idx < self.variant.finalLength {
          let h = accumulatedHash64[idx]
          result[pos + 0] = UInt8((h >> 56) & 0xff)
          result[pos + 1] = UInt8((h >> 48) & 0xff)
          result[pos + 2] = UInt8((h >> 40) & 0xff)
          result[pos + 3] = UInt8((h >> 32) & 0xff)
          result[pos + 4] = UInt8((h >> 24) & 0xff)
          result[pos + 5] = UInt8((h >> 16) & 0xff)
          result[pos + 6] = UInt8((h >> 8) & 0xff)
          result[pos + 7] = UInt8(h & 0xff)
          pos += 8
        }
    }

     
    if isLast {
      switch self.variant {
        case .sha224, .sha256:
          self.accumulatedHash32 = self.variant.h.lazy.map { UInt32($0) }  
        case .sha384, .sha512:
          self.accumulatedHash64 = self.variant.h
      }
    }

    return result
  }
}
public struct PCBC : TartiSdk.BlockMode {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: TartiSdk.PCBC.Error, b: TartiSdk.PCBC.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: TartiSdk.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
}
extension TartiSdk.CS.BigUInt {
  public func squareRoot() -> TartiSdk.CS.BigUInt
}
extension TartiSdk.CS.BigInt {
  public func squareRoot() -> TartiSdk.CS.BigInt
}
@_hasMissingDesignatedInitializers public class RequestDisconnectTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
extension TartiSdk.CS.BigUInt {
  public init(_ buffer: Swift.UnsafeRawBufferPointer)
  public init(_ data: Foundation.Data)
  public func serialize() -> Foundation.Data
}
extension TartiSdk.CS.BigInt {
  public init(_ buffer: Swift.UnsafeRawBufferPointer)
  public init(_ data: Foundation.Data)
  public func serialize() -> Foundation.Data
}
public struct CTR {
  public enum Error : Swift.Error {
    case invalidInitializationVector
    public static func == (a: TartiSdk.CTR.Error, b: TartiSdk.CTR.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let options: TartiSdk.BlockModeOption
  public let customBlockSize: Swift.Int?
  public init(iv: Swift.Array<Swift.UInt8>, counter: Swift.Int = 0)
  public func worker(blockSize: Swift.Int, cipherOperation: @escaping TartiSdk.CipherOperationOnBlock, encryptionOperation: @escaping TartiSdk.CipherOperationOnBlock) throws -> any TartiSdk.CipherModeWorker
}
public enum PKCS5 {
}
@_hasMissingDesignatedInitializers public class GetUserInformationTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GetMeasurementTask : TartiSdk.BaseTask {
  override public func run()
  override public func getType() -> TartiSdk.int
  @objc deinit
}
extension Swift.Array {
  @inlinable internal init(reserveCapacity: Swift.Int) {
    self = Array<Element>()
    self.reserveCapacity(reserveCapacity)
  }
  @inlinable internal var slice: Swift.ArraySlice<Element> {
    get {
    self[self.startIndex ..< self.endIndex]
  }
  }
  @inlinable internal subscript(safe index: Swift.Array<Element>.Index) -> Element? {
    get {
    return indices.contains(index) ? self[index] : nil
  }
  }
}
extension Swift.Array where Element == Swift.UInt8 {
  public init(hex: Swift.String)
  public func toHexString() -> Swift.String
}
extension Swift.Array where Element == Swift.UInt8 {
  @available(*, deprecated)
  public func chunks(size chunksize: Swift.Int) -> Swift.Array<Swift.Array<Element>>
  public func md5() -> [Element]
  public func sha1() -> [Element]
  public func sha224() -> [Element]
  public func sha256() -> [Element]
  public func sha384() -> [Element]
  public func sha512() -> [Element]
  public func sha2(_ variant: TartiSdk.SHA2.Variant) -> [Element]
  public func sha3(_ variant: TartiSdk.SHA3.Variant) -> [Element]
  public func crc32(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc32c(seed: Swift.UInt32? = nil, reflect: Swift.Bool = true) -> Swift.UInt32
  public func crc16(seed: Swift.UInt16? = nil) -> Swift.UInt16
  public func encrypt(cipher: any TartiSdk.Cipher) throws -> [Element]
  public func decrypt(cipher: any TartiSdk.Cipher) throws -> [Element]
  public func authenticate<A>(with authenticator: A) throws -> [Element] where A : TartiSdk.Authenticator
}
@_hasMissingDesignatedInitializers public class User {
  public func serialize(_ amOrBcm: TartiSdk.int, _ scale: TartiSdk.Scale) -> [TartiSdk.byte]
  public func toString() -> Swift.String
  public func setName(_ name: Swift.String)
  public func setBirthDate(_ birthDate: Foundation.Date)
  public func setGender(_ gender: TartiSdk.int)
  public func setFigure(_ figure: TartiSdk.int)
  public func setHeight(_ height: TartiSdk.int)
  public func setActivityLevel(_ activityLevel: TartiSdk.int)
  public func setTare(_ tare: Swift.Double)
  public func setUnit(_ unit: TartiSdk.int)
  public func setArea(_ area: TartiSdk.int)
  public func getFigure() -> TartiSdk.int
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class MIBand2 : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate, CoreBluetooth.CBPeripheralDelegate {
  public func getBattery()
  public func getToday()
  public func setRealTimeSteps()
  public func startRealTimeSteps()
  public func stopRealTimeSteps()
  public func getSingleHeartRate()
  public func getSingleContinuousHeartRate()
  public func startHeartRate()
  public func stopHeartRate()
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc deinit
}
extension TartiSdk.CS.BigUInt : Swift.Strideable {
  public typealias Stride = TartiSdk.CS.BigInt
  public func advanced(by n: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigUInt
  public func distance(to other: TartiSdk.CS.BigUInt) -> TartiSdk.CS.BigInt
}
extension TartiSdk.CS.BigInt : Swift.Strideable {
  public typealias Stride = TartiSdk.CS.BigInt
  public func advanced(by n: TartiSdk.CS.BigInt.Stride) -> TartiSdk.CS.BigInt
  public func distance(to other: TartiSdk.CS.BigInt) -> TartiSdk.CS.BigInt.Stride
}
@_hasMissingDesignatedInitializers final public class AEADXChaCha20Poly1305 : TartiSdk.AEAD {
  public static let kLen: Swift.Int
  public static var ivRange: Swift.Range<Swift.Int>
  public static func encrypt(_ plainText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>) throws -> (cipherText: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>)
  public static func decrypt(_ cipherText: Swift.Array<Swift.UInt8>, key: Swift.Array<Swift.UInt8>, iv: Swift.Array<Swift.UInt8>, authenticationHeader: Swift.Array<Swift.UInt8>, authenticationTag: Swift.Array<Swift.UInt8>) throws -> (plainText: Swift.Array<Swift.UInt8>, success: Swift.Bool)
  @objc deinit
}
public struct HKDF {
  public enum Error : Swift.Error {
    case invalidInput
    case derivedKeyTooLong
    public static func == (a: TartiSdk.HKDF.Error, b: TartiSdk.HKDF.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(password: Swift.Array<Swift.UInt8>, salt: Swift.Array<Swift.UInt8>? = nil, info: Swift.Array<Swift.UInt8>? = nil, keyLength: Swift.Int? = nil, variant: TartiSdk.HMAC.Variant = .sha2(.sha256)) throws
  public func calculate() throws -> Swift.Array<Swift.UInt8>
  public func callAsFunction() throws -> Swift.Array<Swift.UInt8>
}
@_hasMissingDesignatedInitializers public class Serializer {
  public static func serialize2(_ uuid: Foundation.UUID) -> TartiSdk.SerializationBuffer
  public static func serialize3(_ uuid: Foundation.UUID) -> TartiSdk.SerializationBuffer
  public static func serialize16(_ date: Foundation.Date) -> TartiSdk.SerializationBuffer
  public static func serialize32(_ i: TartiSdk.int) -> TartiSdk.SerializationBuffer
  public static func serialize4096(_ i: TartiSdk.int) -> TartiSdk.SerializationBuffer
  public static func serialize4098(_ i: TartiSdk.int, _ scale: TartiSdk.Scale, _ user: TartiSdk.User) -> TartiSdk.SerializationBuffer
  public static func serialize8208() -> TartiSdk.SerializationBuffer
  public static func serialize12288() -> TartiSdk.SerializationBuffer
  public static func serializeByte(_ tag: TartiSdk.int, _ buffer: [TartiSdk.byte]) -> TartiSdk.SerializationBuffer
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Model {
  @objc deinit
}
extension TartiSdk.AES : TartiSdk.Cryptors {
  @inlinable final public func makeEncryptor() throws -> any TartiSdk.Cryptor & TartiSdk.Updatable {
    let blockSize = blockMode.customBlockSize ?? AES.blockSize
    let worker = try blockMode.worker(blockSize: blockSize, cipherOperation: encrypt, encryptionOperation: encrypt)
    if worker is StreamModeWorker {
      return try StreamEncryptor(blockSize: blockSize, padding: padding, worker)
    }
    return try BlockEncryptor(blockSize: blockSize, padding: padding, worker)
  }
  @inlinable final public func makeDecryptor() throws -> any TartiSdk.Cryptor & TartiSdk.Updatable {
    let blockSize = blockMode.customBlockSize ?? AES.blockSize
    let cipherOperation: CipherOperationOnBlock = blockMode.options.contains(.useEncryptToDecrypt) == true ? encrypt : decrypt
    let worker = try blockMode.worker(blockSize: blockSize, cipherOperation: cipherOperation, encryptionOperation: encrypt)
    if worker is StreamModeWorker {
      return try StreamDecryptor(blockSize: blockSize, padding: padding, worker)
    }
    return try BlockDecryptor(blockSize: blockSize, padding: padding, worker)
  }
}
public enum NDismissType {
  case NO_RESPONSE
  case MEASUREMENT_SUCCESS
  case MEASUREMENT_FAILED
  public static func == (a: TartiSdk.NDismissType, b: TartiSdk.NDismissType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TartiSdk.PKCS5.PBKDF2.Error : Swift.Equatable {}
extension TartiSdk.PKCS5.PBKDF2.Error : Swift.Hashable {}
extension TartiSdk.OFB.Error : Swift.Equatable {}
extension TartiSdk.OFB.Error : Swift.Hashable {}
extension TartiSdk.SignatureError : Swift.Equatable {}
extension TartiSdk.SignatureError : Swift.Hashable {}
extension TartiSdk.XChaCha20.Error : Swift.Equatable {}
extension TartiSdk.XChaCha20.Error : Swift.Hashable {}
extension TartiSdk.PKCS5.PBKDF1.Error : Swift.Equatable {}
extension TartiSdk.PKCS5.PBKDF1.Error : Swift.Hashable {}
extension TartiSdk.PKCS5.PBKDF1.Variant : Swift.Equatable {}
extension TartiSdk.PKCS5.PBKDF1.Variant : Swift.Hashable {}
extension TartiSdk.NDuration : Swift.Equatable {}
extension TartiSdk.NDuration : Swift.Hashable {}
extension TartiSdk.CMAC.Error : Swift.Equatable {}
extension TartiSdk.CMAC.Error : Swift.Hashable {}
extension TartiSdk.Bit : Swift.Equatable {}
extension TartiSdk.Bit : Swift.Hashable {}
extension TartiSdk.Bit : Swift.RawRepresentable {}
extension TartiSdk.AES.Error : Swift.Equatable {}
extension TartiSdk.AES.Error : Swift.Hashable {}
extension TartiSdk.AES.Variant : Swift.Equatable {}
extension TartiSdk.AES.Variant : Swift.Hashable {}
extension TartiSdk.AES.Variant : Swift.RawRepresentable {}
extension TartiSdk.NConnectionStatusType : Swift.Equatable {}
extension TartiSdk.NConnectionStatusType : Swift.Hashable {}
extension TartiSdk.Poly1305.Error : Swift.Equatable {}
extension TartiSdk.Poly1305.Error : Swift.Hashable {}
extension TartiSdk.ToastPosition : Swift.Equatable {}
extension TartiSdk.ToastPosition : Swift.Hashable {}
extension TartiSdk.Blowfish.Error : Swift.Equatable {}
extension TartiSdk.Blowfish.Error : Swift.Hashable {}
extension TartiSdk.NCallbackType : Swift.Equatable {}
extension TartiSdk.NCallbackType : Swift.Hashable {}
extension TartiSdk.CipherError : Swift.Equatable {}
extension TartiSdk.CipherError : Swift.Hashable {}
extension TartiSdk.CBC.Error : Swift.Equatable {}
extension TartiSdk.CBC.Error : Swift.Hashable {}
extension TartiSdk.RSA.Error : Swift.Equatable {}
extension TartiSdk.RSA.Error : Swift.Hashable {}
extension TartiSdk.Nuve.Duration : Swift.Equatable {}
extension TartiSdk.Nuve.Duration : Swift.Hashable {}
extension TartiSdk.Rabbit.Error : Swift.Equatable {}
extension TartiSdk.Rabbit.Error : Swift.Hashable {}
extension TartiSdk.Padding : Swift.Equatable {}
extension TartiSdk.Padding : Swift.Hashable {}
extension TartiSdk.CCM : TartiSdk.BlockMode {}
extension TartiSdk.CCM.Error : Swift.Equatable {}
extension TartiSdk.CCM.Error : Swift.Hashable {}
extension TartiSdk.GCM.Mode : Swift.Equatable {}
extension TartiSdk.GCM.Mode : Swift.Hashable {}
extension TartiSdk.GCM.Error : Swift.Equatable {}
extension TartiSdk.GCM.Error : Swift.Hashable {}
extension TartiSdk.RSA.SignatureVariant : Swift.Equatable {}
extension TartiSdk.RSA.SignatureVariant : Swift.Hashable {}
extension TartiSdk.RSA.RSAEncryptionVariant : Swift.Equatable {}
extension TartiSdk.RSA.RSAEncryptionVariant : Swift.Hashable {}
extension TartiSdk.RSA.RSAEncryptionVariant : Swift.Sendable {}
extension TartiSdk.RSA.RSAEncryptionVariant : Swift.BitwiseCopyable {}
extension TartiSdk.CFB.Error : Swift.Equatable {}
extension TartiSdk.CFB.Error : Swift.Hashable {}
extension TartiSdk.CFB.SegmentSize : Swift.Equatable {}
extension TartiSdk.CFB.SegmentSize : Swift.Hashable {}
extension TartiSdk.CFB.SegmentSize : Swift.RawRepresentable {}
extension TartiSdk.SHA3.Variant : Swift.Equatable {}
extension TartiSdk.SHA3.Variant : Swift.Hashable {}
extension TartiSdk.CS.BigInt.Sign : Swift.Equatable {}
extension TartiSdk.CS.BigInt.Sign : Swift.Hashable {}
extension TartiSdk.ChaCha20.Error : Swift.Equatable {}
extension TartiSdk.ChaCha20.Error : Swift.Hashable {}
extension TartiSdk.OCB.Mode : Swift.Equatable {}
extension TartiSdk.OCB.Mode : Swift.Hashable {}
extension TartiSdk.OCB.Error : Swift.Equatable {}
extension TartiSdk.OCB.Error : Swift.Hashable {}
extension TartiSdk.HMAC.Error : Swift.Equatable {}
extension TartiSdk.HMAC.Error : Swift.Hashable {}
extension TartiSdk.SHA2.Variant : Swift.Equatable {}
extension TartiSdk.SHA2.Variant : Swift.Hashable {}
extension TartiSdk.SHA2.Variant : Swift.Sendable {}
extension TartiSdk.SHA2.Variant : Swift.BitwiseCopyable {}
extension TartiSdk.PCBC.Error : Swift.Equatable {}
extension TartiSdk.PCBC.Error : Swift.Hashable {}
extension TartiSdk.CTR : TartiSdk.BlockMode {}
extension TartiSdk.CTR.Error : Swift.Equatable {}
extension TartiSdk.CTR.Error : Swift.Hashable {}
extension TartiSdk.HKDF.Error : Swift.Equatable {}
extension TartiSdk.HKDF.Error : Swift.Hashable {}
extension TartiSdk.NDismissType : Swift.Equatable {}
extension TartiSdk.NDismissType : Swift.Hashable {}
